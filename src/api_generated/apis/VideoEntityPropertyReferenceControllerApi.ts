/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  CollectionModelObject,
  CollectionModelObjectFromJSON,
  CollectionModelObjectToJSON,
  CollectionModelUserGroupEntity,
  CollectionModelUserGroupEntityFromJSON,
  CollectionModelUserGroupEntityToJSON,
  EntityModelUserEntity,
  EntityModelUserEntityFromJSON,
  EntityModelUserEntityToJSON,
} from '../models';

export interface CreatePropertyReferenceVideoentityPatchRequest {
  id: string;
  collectionModelObject: CollectionModelObject;
}

export interface CreatePropertyReferenceVideoentityPatch1Request {
  id: string;
  collectionModelObject: CollectionModelObject;
}

export interface CreatePropertyReferenceVideoentityPutRequest {
  id: string;
  collectionModelObject: CollectionModelObject;
}

export interface CreatePropertyReferenceVideoentityPut1Request {
  id: string;
  collectionModelObject: CollectionModelObject;
}

export interface DeletePropertyReferenceIdVideoentityDeleteRequest {
  id: string;
  propertyId: string;
}

export interface DeletePropertyReferenceIdVideoentityDelete1Request {
  id: string;
  propertyId: string;
}

export interface DeletePropertyReferenceVideoentityDeleteRequest {
  id: string;
}

export interface DeletePropertyReferenceVideoentityDelete1Request {
  id: string;
}

export interface FollowPropertyReferenceVideoentityGetRequest {
  id: string;
  propertyId: string;
}

export interface FollowPropertyReferenceVideoentityGet1Request {
  id: string;
}

export interface FollowPropertyReferenceVideoentityGet2Request {
  id: string;
  propertyId: string;
}

export interface FollowPropertyReferenceVideoentityGet21Request {
  id: string;
}

/**
 *
 */
export class VideoEntityPropertyReferenceControllerApi extends runtime.BaseAPI {
  /**
   * patch-usergroupentity-by-videoentity-Id
   */
  async createPropertyReferenceVideoentityPatchRaw(
    requestParameters: CreatePropertyReferenceVideoentityPatchRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelUserGroupEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling createPropertyReferenceVideoentityPatch.',
      );
    }

    if (requestParameters.collectionModelObject === null || requestParameters.collectionModelObject === undefined) {
      throw new runtime.RequiredError(
        'collectionModelObject',
        'Required parameter requestParameters.collectionModelObject was null or undefined when calling createPropertyReferenceVideoentityPatch.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/videos/{id}/allowedGroups`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: CollectionModelObjectToJSON(requestParameters.collectionModelObject),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * patch-usergroupentity-by-videoentity-Id
   */
  async createPropertyReferenceVideoentityPatch(
    requestParameters: CreatePropertyReferenceVideoentityPatchRequest,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelUserGroupEntity> {
    const response = await this.createPropertyReferenceVideoentityPatchRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * patch-userentity-by-videoentity-Id
   */
  async createPropertyReferenceVideoentityPatch1Raw(
    requestParameters: CreatePropertyReferenceVideoentityPatch1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling createPropertyReferenceVideoentityPatch1.',
      );
    }

    if (requestParameters.collectionModelObject === null || requestParameters.collectionModelObject === undefined) {
      throw new runtime.RequiredError(
        'collectionModelObject',
        'Required parameter requestParameters.collectionModelObject was null or undefined when calling createPropertyReferenceVideoentityPatch1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/videos/{id}/author`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: CollectionModelObjectToJSON(requestParameters.collectionModelObject),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserEntityFromJSON(jsonValue));
  }

  /**
   * patch-userentity-by-videoentity-Id
   */
  async createPropertyReferenceVideoentityPatch1(
    requestParameters: CreatePropertyReferenceVideoentityPatch1Request,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserEntity> {
    const response = await this.createPropertyReferenceVideoentityPatch1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * update-usergroupentity-by-videoentity-Id
   */
  async createPropertyReferenceVideoentityPutRaw(
    requestParameters: CreatePropertyReferenceVideoentityPutRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelUserGroupEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling createPropertyReferenceVideoentityPut.',
      );
    }

    if (requestParameters.collectionModelObject === null || requestParameters.collectionModelObject === undefined) {
      throw new runtime.RequiredError(
        'collectionModelObject',
        'Required parameter requestParameters.collectionModelObject was null or undefined when calling createPropertyReferenceVideoentityPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/videos/{id}/allowedGroups`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CollectionModelObjectToJSON(requestParameters.collectionModelObject),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * update-usergroupentity-by-videoentity-Id
   */
  async createPropertyReferenceVideoentityPut(
    requestParameters: CreatePropertyReferenceVideoentityPutRequest,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelUserGroupEntity> {
    const response = await this.createPropertyReferenceVideoentityPutRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * update-userentity-by-videoentity-Id
   */
  async createPropertyReferenceVideoentityPut1Raw(
    requestParameters: CreatePropertyReferenceVideoentityPut1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling createPropertyReferenceVideoentityPut1.',
      );
    }

    if (requestParameters.collectionModelObject === null || requestParameters.collectionModelObject === undefined) {
      throw new runtime.RequiredError(
        'collectionModelObject',
        'Required parameter requestParameters.collectionModelObject was null or undefined when calling createPropertyReferenceVideoentityPut1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/videos/{id}/author`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CollectionModelObjectToJSON(requestParameters.collectionModelObject),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserEntityFromJSON(jsonValue));
  }

  /**
   * update-userentity-by-videoentity-Id
   */
  async createPropertyReferenceVideoentityPut1(
    requestParameters: CreatePropertyReferenceVideoentityPut1Request,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserEntity> {
    const response = await this.createPropertyReferenceVideoentityPut1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * delete-usergroupentity-by-videoentity-Id
   */
  async deletePropertyReferenceIdVideoentityDeleteRaw(
    requestParameters: DeletePropertyReferenceIdVideoentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deletePropertyReferenceIdVideoentityDelete.',
      );
    }

    if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
      throw new runtime.RequiredError(
        'propertyId',
        'Required parameter requestParameters.propertyId was null or undefined when calling deletePropertyReferenceIdVideoentityDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/videos/{id}/allowedGroups/{propertyId}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(requestParameters.propertyId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-usergroupentity-by-videoentity-Id
   */
  async deletePropertyReferenceIdVideoentityDelete(
    requestParameters: DeletePropertyReferenceIdVideoentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deletePropertyReferenceIdVideoentityDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * delete-userentity-by-videoentity-Id
   */
  async deletePropertyReferenceIdVideoentityDelete1Raw(
    requestParameters: DeletePropertyReferenceIdVideoentityDelete1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deletePropertyReferenceIdVideoentityDelete1.',
      );
    }

    if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
      throw new runtime.RequiredError(
        'propertyId',
        'Required parameter requestParameters.propertyId was null or undefined when calling deletePropertyReferenceIdVideoentityDelete1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/videos/{id}/author/{propertyId}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(requestParameters.propertyId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-userentity-by-videoentity-Id
   */
  async deletePropertyReferenceIdVideoentityDelete1(
    requestParameters: DeletePropertyReferenceIdVideoentityDelete1Request,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deletePropertyReferenceIdVideoentityDelete1Raw(requestParameters, initOverrides);
  }

  /**
   * delete-usergroupentity-by-videoentity-Id
   */
  async deletePropertyReferenceVideoentityDeleteRaw(
    requestParameters: DeletePropertyReferenceVideoentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deletePropertyReferenceVideoentityDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/videos/{id}/allowedGroups`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-usergroupentity-by-videoentity-Id
   */
  async deletePropertyReferenceVideoentityDelete(
    requestParameters: DeletePropertyReferenceVideoentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deletePropertyReferenceVideoentityDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * delete-userentity-by-videoentity-Id
   */
  async deletePropertyReferenceVideoentityDelete1Raw(
    requestParameters: DeletePropertyReferenceVideoentityDelete1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deletePropertyReferenceVideoentityDelete1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/videos/{id}/author`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-userentity-by-videoentity-Id
   */
  async deletePropertyReferenceVideoentityDelete1(
    requestParameters: DeletePropertyReferenceVideoentityDelete1Request,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deletePropertyReferenceVideoentityDelete1Raw(requestParameters, initOverrides);
  }

  /**
   * get-usergroupentity-by-videoentity-Id
   */
  async followPropertyReferenceVideoentityGetRaw(
    requestParameters: FollowPropertyReferenceVideoentityGetRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelUserGroupEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling followPropertyReferenceVideoentityGet.',
      );
    }

    if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
      throw new runtime.RequiredError(
        'propertyId',
        'Required parameter requestParameters.propertyId was null or undefined when calling followPropertyReferenceVideoentityGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/videos/{id}/allowedGroups/{propertyId}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(requestParameters.propertyId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * get-usergroupentity-by-videoentity-Id
   */
  async followPropertyReferenceVideoentityGet(
    requestParameters: FollowPropertyReferenceVideoentityGetRequest,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelUserGroupEntity> {
    const response = await this.followPropertyReferenceVideoentityGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * get-usergroupentity-by-videoentity-Id
   */
  async followPropertyReferenceVideoentityGet1Raw(
    requestParameters: FollowPropertyReferenceVideoentityGet1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelUserGroupEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling followPropertyReferenceVideoentityGet1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/videos/{id}/allowedGroups`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * get-usergroupentity-by-videoentity-Id
   */
  async followPropertyReferenceVideoentityGet1(
    requestParameters: FollowPropertyReferenceVideoentityGet1Request,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelUserGroupEntity> {
    const response = await this.followPropertyReferenceVideoentityGet1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * get-userentity-by-videoentity-Id
   */
  async followPropertyReferenceVideoentityGet2Raw(
    requestParameters: FollowPropertyReferenceVideoentityGet2Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling followPropertyReferenceVideoentityGet2.',
      );
    }

    if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
      throw new runtime.RequiredError(
        'propertyId',
        'Required parameter requestParameters.propertyId was null or undefined when calling followPropertyReferenceVideoentityGet2.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/videos/{id}/author/{propertyId}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(requestParameters.propertyId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserEntityFromJSON(jsonValue));
  }

  /**
   * get-userentity-by-videoentity-Id
   */
  async followPropertyReferenceVideoentityGet2(
    requestParameters: FollowPropertyReferenceVideoentityGet2Request,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserEntity> {
    const response = await this.followPropertyReferenceVideoentityGet2Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * get-userentity-by-videoentity-Id
   */
  async followPropertyReferenceVideoentityGet21Raw(
    requestParameters: FollowPropertyReferenceVideoentityGet21Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling followPropertyReferenceVideoentityGet21.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/videos/{id}/author`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserEntityFromJSON(jsonValue));
  }

  /**
   * get-userentity-by-videoentity-Id
   */
  async followPropertyReferenceVideoentityGet21(
    requestParameters: FollowPropertyReferenceVideoentityGet21Request,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserEntity> {
    const response = await this.followPropertyReferenceVideoentityGet21Raw(requestParameters, initOverrides);
    return await response.value();
  }
}
