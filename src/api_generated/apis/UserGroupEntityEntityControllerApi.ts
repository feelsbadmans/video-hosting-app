/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  CollectionModelEntityModelUserGroupEntity,
  CollectionModelEntityModelUserGroupEntityFromJSON,
  CollectionModelEntityModelUserGroupEntityToJSON,
  EntityModelUserGroupEntity,
  EntityModelUserGroupEntityFromJSON,
  EntityModelUserGroupEntityToJSON,
  UserGroupEntityRequestBody,
  UserGroupEntityRequestBodyFromJSON,
  UserGroupEntityRequestBodyToJSON,
} from '../models';

export interface DeleteItemResourceUsergroupentityDeleteRequest {
  id: string;
}

export interface GetItemResourceUsergroupentityGetRequest {
  id: string;
}

export interface PatchItemResourceUsergroupentityPatchRequest {
  id: string;
  userGroupEntityRequestBody: UserGroupEntityRequestBody;
}

export interface PostCollectionResourceUsergroupentityPostRequest {
  userGroupEntityRequestBody: UserGroupEntityRequestBody;
}

export interface PutItemResourceUsergroupentityPutRequest {
  id: string;
  userGroupEntityRequestBody: UserGroupEntityRequestBody;
}

/**
 *
 */
export class UserGroupEntityEntityControllerApi extends runtime.BaseAPI {
  /**
   * delete-usergroupentity
   */
  async deleteItemResourceUsergroupentityDeleteRaw(
    requestParameters: DeleteItemResourceUsergroupentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deleteItemResourceUsergroupentityDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/user-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-usergroupentity
   */
  async deleteItemResourceUsergroupentityDelete(
    requestParameters: DeleteItemResourceUsergroupentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deleteItemResourceUsergroupentityDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * get-usergroupentity
   */
  async getCollectionResourceUsergroupentityGet1Raw(
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelEntityModelUserGroupEntity>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/user-groups`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CollectionModelEntityModelUserGroupEntityFromJSON(jsonValue),
    );
  }

  /**
   * get-usergroupentity
   */
  async getCollectionResourceUsergroupentityGet1(
    initOverrides?: RequestInit,
  ): Promise<CollectionModelEntityModelUserGroupEntity> {
    const response = await this.getCollectionResourceUsergroupentityGet1Raw(initOverrides);
    return await response.value();
  }

  /**
   * get-usergroupentity
   */
  async getItemResourceUsergroupentityGetRaw(
    requestParameters: GetItemResourceUsergroupentityGetRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserGroupEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getItemResourceUsergroupentityGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/user-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * get-usergroupentity
   */
  async getItemResourceUsergroupentityGet(
    requestParameters: GetItemResourceUsergroupentityGetRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserGroupEntity> {
    const response = await this.getItemResourceUsergroupentityGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * patch-usergroupentity
   */
  async patchItemResourceUsergroupentityPatchRaw(
    requestParameters: PatchItemResourceUsergroupentityPatchRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserGroupEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling patchItemResourceUsergroupentityPatch.',
      );
    }

    if (
      requestParameters.userGroupEntityRequestBody === null ||
      requestParameters.userGroupEntityRequestBody === undefined
    ) {
      throw new runtime.RequiredError(
        'userGroupEntityRequestBody',
        'Required parameter requestParameters.userGroupEntityRequestBody was null or undefined when calling patchItemResourceUsergroupentityPatch.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/user-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UserGroupEntityRequestBodyToJSON(requestParameters.userGroupEntityRequestBody),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * patch-usergroupentity
   */
  async patchItemResourceUsergroupentityPatch(
    requestParameters: PatchItemResourceUsergroupentityPatchRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserGroupEntity> {
    const response = await this.patchItemResourceUsergroupentityPatchRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * create-usergroupentity
   */
  async postCollectionResourceUsergroupentityPostRaw(
    requestParameters: PostCollectionResourceUsergroupentityPostRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserGroupEntity>> {
    if (
      requestParameters.userGroupEntityRequestBody === null ||
      requestParameters.userGroupEntityRequestBody === undefined
    ) {
      throw new runtime.RequiredError(
        'userGroupEntityRequestBody',
        'Required parameter requestParameters.userGroupEntityRequestBody was null or undefined when calling postCollectionResourceUsergroupentityPost.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/user-groups`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UserGroupEntityRequestBodyToJSON(requestParameters.userGroupEntityRequestBody),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * create-usergroupentity
   */
  async postCollectionResourceUsergroupentityPost(
    requestParameters: PostCollectionResourceUsergroupentityPostRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserGroupEntity> {
    const response = await this.postCollectionResourceUsergroupentityPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * update-usergroupentity
   */
  async putItemResourceUsergroupentityPutRaw(
    requestParameters: PutItemResourceUsergroupentityPutRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserGroupEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling putItemResourceUsergroupentityPut.',
      );
    }

    if (
      requestParameters.userGroupEntityRequestBody === null ||
      requestParameters.userGroupEntityRequestBody === undefined
    ) {
      throw new runtime.RequiredError(
        'userGroupEntityRequestBody',
        'Required parameter requestParameters.userGroupEntityRequestBody was null or undefined when calling putItemResourceUsergroupentityPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/user-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UserGroupEntityRequestBodyToJSON(requestParameters.userGroupEntityRequestBody),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * update-usergroupentity
   */
  async putItemResourceUsergroupentityPut(
    requestParameters: PutItemResourceUsergroupentityPutRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserGroupEntity> {
    const response = await this.putItemResourceUsergroupentityPutRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
