/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  JsonSchema,
  JsonSchemaFromJSON,
  JsonSchemaToJSON,
  RepresentationModelObject,
  RepresentationModelObjectFromJSON,
  RepresentationModelObjectToJSON,
} from '../models';

/**
 *
 */
export class ProfileControllerApi extends runtime.BaseAPI {
  /**
   */
  async descriptor111Raw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/profile/authorityEntities`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async descriptor111(initOverrides?: RequestInit): Promise<string> {
    const response = await this.descriptor111Raw(initOverrides);
    return await response.value();
  }

  /**
   */
  async descriptor112Raw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/profile/user-groups`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async descriptor112(initOverrides?: RequestInit): Promise<string> {
    const response = await this.descriptor112Raw(initOverrides);
    return await response.value();
  }

  /**
   */
  async descriptor113Raw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/profile/users`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async descriptor113(initOverrides?: RequestInit): Promise<string> {
    const response = await this.descriptor113Raw(initOverrides);
    return await response.value();
  }

  /**
   */
  async descriptor114Raw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/profile/videos`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async descriptor114(initOverrides?: RequestInit): Promise<string> {
    const response = await this.descriptor114Raw(initOverrides);
    return await response.value();
  }

  /**
   */
  async listAllFormsOfMetadata1Raw(
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RepresentationModelObject>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/profile`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RepresentationModelObjectFromJSON(jsonValue));
  }

  /**
   */
  async listAllFormsOfMetadata1(initOverrides?: RequestInit): Promise<RepresentationModelObject> {
    const response = await this.listAllFormsOfMetadata1Raw(initOverrides);
    return await response.value();
  }
}
