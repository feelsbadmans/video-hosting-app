/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  EntityModelUserEntity,
  EntityModelUserEntityFromJSON,
  EntityModelUserEntityToJSON,
  PagedModelEntityModelUserEntity,
  PagedModelEntityModelUserEntityFromJSON,
  PagedModelEntityModelUserEntityToJSON,
  UserEntityRequestBody,
  UserEntityRequestBodyFromJSON,
  UserEntityRequestBodyToJSON,
} from '../models';

export interface DeleteItemResourceUserentityDeleteRequest {
  id: string;
}

export interface GetCollectionResourceUserentityGet1Request {
  page?: number;
  size?: number;
  sort?: Array<string>;
}

export interface GetItemResourceUserentityGetRequest {
  id: string;
}

export interface PatchItemResourceUserentityPatchRequest {
  id: string;
  userEntityRequestBody: UserEntityRequestBody;
}

export interface PostCollectionResourceUserentityPostRequest {
  userEntityRequestBody: UserEntityRequestBody;
}

export interface PutItemResourceUserentityPutRequest {
  id: string;
  userEntityRequestBody: UserEntityRequestBody;
}

/**
 *
 */
export class UserEntityEntityControllerApi extends runtime.BaseAPI {
  /**
   * delete-userentity
   */
  async deleteItemResourceUserentityDeleteRaw(
    requestParameters: DeleteItemResourceUserentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deleteItemResourceUserentityDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-userentity
   */
  async deleteItemResourceUserentityDelete(
    requestParameters: DeleteItemResourceUserentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deleteItemResourceUserentityDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * get-userentity
   */
  async getCollectionResourceUserentityGet1Raw(
    requestParameters: GetCollectionResourceUserentityGet1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<PagedModelEntityModelUserEntity>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    if (requestParameters.sort) {
      queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelEntityModelUserEntityFromJSON(jsonValue));
  }

  /**
   * get-userentity
   */
  async getCollectionResourceUserentityGet1(
    requestParameters: GetCollectionResourceUserentityGet1Request = {},
    initOverrides?: RequestInit,
  ): Promise<PagedModelEntityModelUserEntity> {
    const response = await this.getCollectionResourceUserentityGet1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * get-userentity
   */
  async getItemResourceUserentityGetRaw(
    requestParameters: GetItemResourceUserentityGetRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getItemResourceUserentityGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserEntityFromJSON(jsonValue));
  }

  /**
   * get-userentity
   */
  async getItemResourceUserentityGet(
    requestParameters: GetItemResourceUserentityGetRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserEntity> {
    const response = await this.getItemResourceUserentityGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * patch-userentity
   */
  async patchItemResourceUserentityPatchRaw(
    requestParameters: PatchItemResourceUserentityPatchRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling patchItemResourceUserentityPatch.',
      );
    }

    if (requestParameters.userEntityRequestBody === null || requestParameters.userEntityRequestBody === undefined) {
      throw new runtime.RequiredError(
        'userEntityRequestBody',
        'Required parameter requestParameters.userEntityRequestBody was null or undefined when calling patchItemResourceUserentityPatch.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UserEntityRequestBodyToJSON(requestParameters.userEntityRequestBody),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserEntityFromJSON(jsonValue));
  }

  /**
   * patch-userentity
   */
  async patchItemResourceUserentityPatch(
    requestParameters: PatchItemResourceUserentityPatchRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserEntity> {
    const response = await this.patchItemResourceUserentityPatchRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * create-userentity
   */
  async postCollectionResourceUserentityPostRaw(
    requestParameters: PostCollectionResourceUserentityPostRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserEntity>> {
    if (requestParameters.userEntityRequestBody === null || requestParameters.userEntityRequestBody === undefined) {
      throw new runtime.RequiredError(
        'userEntityRequestBody',
        'Required parameter requestParameters.userEntityRequestBody was null or undefined when calling postCollectionResourceUserentityPost.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UserEntityRequestBodyToJSON(requestParameters.userEntityRequestBody),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserEntityFromJSON(jsonValue));
  }

  /**
   * create-userentity
   */
  async postCollectionResourceUserentityPost(
    requestParameters: PostCollectionResourceUserentityPostRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserEntity> {
    const response = await this.postCollectionResourceUserentityPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * update-userentity
   */
  async putItemResourceUserentityPutRaw(
    requestParameters: PutItemResourceUserentityPutRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling putItemResourceUserentityPut.',
      );
    }

    if (requestParameters.userEntityRequestBody === null || requestParameters.userEntityRequestBody === undefined) {
      throw new runtime.RequiredError(
        'userEntityRequestBody',
        'Required parameter requestParameters.userEntityRequestBody was null or undefined when calling putItemResourceUserentityPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UserEntityRequestBodyToJSON(requestParameters.userEntityRequestBody),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserEntityFromJSON(jsonValue));
  }

  /**
   * update-userentity
   */
  async putItemResourceUserentityPut(
    requestParameters: PutItemResourceUserentityPutRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserEntity> {
    const response = await this.putItemResourceUserentityPutRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
