/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  CollectionModelAuthorityEntity,
  CollectionModelAuthorityEntityFromJSON,
  CollectionModelAuthorityEntityToJSON,
  CollectionModelObject,
  CollectionModelObjectFromJSON,
  CollectionModelObjectToJSON,
  CollectionModelVideoEntity,
  CollectionModelVideoEntityFromJSON,
  CollectionModelVideoEntityToJSON,
  EntityModelUserGroupEntity,
  EntityModelUserGroupEntityFromJSON,
  EntityModelUserGroupEntityToJSON,
} from '../models';

export interface CreatePropertyReferenceUserentityPatchRequest {
  id: string;
  collectionModelObject: CollectionModelObject;
}

export interface CreatePropertyReferenceUserentityPatch1Request {
  id: string;
  collectionModelObject: CollectionModelObject;
}

export interface CreatePropertyReferenceUserentityPatch2Request {
  id: string;
  collectionModelObject: CollectionModelObject;
}

export interface CreatePropertyReferenceUserentityPutRequest {
  id: string;
  collectionModelObject: CollectionModelObject;
}

export interface CreatePropertyReferenceUserentityPut1Request {
  id: string;
  collectionModelObject: CollectionModelObject;
}

export interface CreatePropertyReferenceUserentityPut2Request {
  id: string;
  collectionModelObject: CollectionModelObject;
}

export interface DeletePropertyReferenceIdUserentityDeleteRequest {
  id: string;
  propertyId: string;
}

export interface DeletePropertyReferenceIdUserentityDelete1Request {
  id: string;
  propertyId: string;
}

export interface DeletePropertyReferenceIdUserentityDelete2Request {
  id: string;
  propertyId: string;
}

export interface DeletePropertyReferenceUserentityDeleteRequest {
  id: string;
}

export interface DeletePropertyReferenceUserentityDelete1Request {
  id: string;
}

export interface DeletePropertyReferenceUserentityDelete2Request {
  id: string;
}

export interface FollowPropertyReferenceUserentityGetRequest {
  id: string;
  propertyId: string;
}

export interface FollowPropertyReferenceUserentityGet1Request {
  id: string;
}

export interface FollowPropertyReferenceUserentityGet2Request {
  id: string;
  propertyId: string;
}

export interface FollowPropertyReferenceUserentityGet21Request {
  id: string;
}

export interface FollowPropertyReferenceUserentityGet3Request {
  id: string;
  propertyId: string;
}

export interface FollowPropertyReferenceUserentityGet31Request {
  id: string;
}

/**
 *
 */
export class UserEntityPropertyReferenceControllerApi extends runtime.BaseAPI {
  /**
   * patch-authorityentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPatchRaw(
    requestParameters: CreatePropertyReferenceUserentityPatchRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelAuthorityEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling createPropertyReferenceUserentityPatch.',
      );
    }

    if (requestParameters.collectionModelObject === null || requestParameters.collectionModelObject === undefined) {
      throw new runtime.RequiredError(
        'collectionModelObject',
        'Required parameter requestParameters.collectionModelObject was null or undefined when calling createPropertyReferenceUserentityPatch.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users/{id}/authorities`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: CollectionModelObjectToJSON(requestParameters.collectionModelObject),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelAuthorityEntityFromJSON(jsonValue));
  }

  /**
   * patch-authorityentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPatch(
    requestParameters: CreatePropertyReferenceUserentityPatchRequest,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelAuthorityEntity> {
    const response = await this.createPropertyReferenceUserentityPatchRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * patch-usergroupentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPatch1Raw(
    requestParameters: CreatePropertyReferenceUserentityPatch1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserGroupEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling createPropertyReferenceUserentityPatch1.',
      );
    }

    if (requestParameters.collectionModelObject === null || requestParameters.collectionModelObject === undefined) {
      throw new runtime.RequiredError(
        'collectionModelObject',
        'Required parameter requestParameters.collectionModelObject was null or undefined when calling createPropertyReferenceUserentityPatch1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users/{id}/group`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: CollectionModelObjectToJSON(requestParameters.collectionModelObject),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * patch-usergroupentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPatch1(
    requestParameters: CreatePropertyReferenceUserentityPatch1Request,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserGroupEntity> {
    const response = await this.createPropertyReferenceUserentityPatch1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * patch-videoentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPatch2Raw(
    requestParameters: CreatePropertyReferenceUserentityPatch2Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelVideoEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling createPropertyReferenceUserentityPatch2.',
      );
    }

    if (requestParameters.collectionModelObject === null || requestParameters.collectionModelObject === undefined) {
      throw new runtime.RequiredError(
        'collectionModelObject',
        'Required parameter requestParameters.collectionModelObject was null or undefined when calling createPropertyReferenceUserentityPatch2.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users/{id}/videos`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: CollectionModelObjectToJSON(requestParameters.collectionModelObject),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelVideoEntityFromJSON(jsonValue));
  }

  /**
   * patch-videoentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPatch2(
    requestParameters: CreatePropertyReferenceUserentityPatch2Request,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelVideoEntity> {
    const response = await this.createPropertyReferenceUserentityPatch2Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * update-authorityentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPutRaw(
    requestParameters: CreatePropertyReferenceUserentityPutRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelAuthorityEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling createPropertyReferenceUserentityPut.',
      );
    }

    if (requestParameters.collectionModelObject === null || requestParameters.collectionModelObject === undefined) {
      throw new runtime.RequiredError(
        'collectionModelObject',
        'Required parameter requestParameters.collectionModelObject was null or undefined when calling createPropertyReferenceUserentityPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users/{id}/authorities`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CollectionModelObjectToJSON(requestParameters.collectionModelObject),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelAuthorityEntityFromJSON(jsonValue));
  }

  /**
   * update-authorityentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPut(
    requestParameters: CreatePropertyReferenceUserentityPutRequest,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelAuthorityEntity> {
    const response = await this.createPropertyReferenceUserentityPutRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * update-usergroupentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPut1Raw(
    requestParameters: CreatePropertyReferenceUserentityPut1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserGroupEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling createPropertyReferenceUserentityPut1.',
      );
    }

    if (requestParameters.collectionModelObject === null || requestParameters.collectionModelObject === undefined) {
      throw new runtime.RequiredError(
        'collectionModelObject',
        'Required parameter requestParameters.collectionModelObject was null or undefined when calling createPropertyReferenceUserentityPut1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users/{id}/group`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CollectionModelObjectToJSON(requestParameters.collectionModelObject),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * update-usergroupentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPut1(
    requestParameters: CreatePropertyReferenceUserentityPut1Request,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserGroupEntity> {
    const response = await this.createPropertyReferenceUserentityPut1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * update-videoentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPut2Raw(
    requestParameters: CreatePropertyReferenceUserentityPut2Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelVideoEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling createPropertyReferenceUserentityPut2.',
      );
    }

    if (requestParameters.collectionModelObject === null || requestParameters.collectionModelObject === undefined) {
      throw new runtime.RequiredError(
        'collectionModelObject',
        'Required parameter requestParameters.collectionModelObject was null or undefined when calling createPropertyReferenceUserentityPut2.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users/{id}/videos`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CollectionModelObjectToJSON(requestParameters.collectionModelObject),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelVideoEntityFromJSON(jsonValue));
  }

  /**
   * update-videoentity-by-userentity-Id
   */
  async createPropertyReferenceUserentityPut2(
    requestParameters: CreatePropertyReferenceUserentityPut2Request,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelVideoEntity> {
    const response = await this.createPropertyReferenceUserentityPut2Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * delete-authorityentity-by-userentity-Id
   */
  async deletePropertyReferenceIdUserentityDeleteRaw(
    requestParameters: DeletePropertyReferenceIdUserentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deletePropertyReferenceIdUserentityDelete.',
      );
    }

    if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
      throw new runtime.RequiredError(
        'propertyId',
        'Required parameter requestParameters.propertyId was null or undefined when calling deletePropertyReferenceIdUserentityDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/authorities/{propertyId}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(requestParameters.propertyId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-authorityentity-by-userentity-Id
   */
  async deletePropertyReferenceIdUserentityDelete(
    requestParameters: DeletePropertyReferenceIdUserentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deletePropertyReferenceIdUserentityDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * delete-usergroupentity-by-userentity-Id
   */
  async deletePropertyReferenceIdUserentityDelete1Raw(
    requestParameters: DeletePropertyReferenceIdUserentityDelete1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deletePropertyReferenceIdUserentityDelete1.',
      );
    }

    if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
      throw new runtime.RequiredError(
        'propertyId',
        'Required parameter requestParameters.propertyId was null or undefined when calling deletePropertyReferenceIdUserentityDelete1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/group/{propertyId}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(requestParameters.propertyId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-usergroupentity-by-userentity-Id
   */
  async deletePropertyReferenceIdUserentityDelete1(
    requestParameters: DeletePropertyReferenceIdUserentityDelete1Request,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deletePropertyReferenceIdUserentityDelete1Raw(requestParameters, initOverrides);
  }

  /**
   * delete-videoentity-by-userentity-Id
   */
  async deletePropertyReferenceIdUserentityDelete2Raw(
    requestParameters: DeletePropertyReferenceIdUserentityDelete2Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deletePropertyReferenceIdUserentityDelete2.',
      );
    }

    if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
      throw new runtime.RequiredError(
        'propertyId',
        'Required parameter requestParameters.propertyId was null or undefined when calling deletePropertyReferenceIdUserentityDelete2.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/videos/{propertyId}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(requestParameters.propertyId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-videoentity-by-userentity-Id
   */
  async deletePropertyReferenceIdUserentityDelete2(
    requestParameters: DeletePropertyReferenceIdUserentityDelete2Request,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deletePropertyReferenceIdUserentityDelete2Raw(requestParameters, initOverrides);
  }

  /**
   * delete-authorityentity-by-userentity-Id
   */
  async deletePropertyReferenceUserentityDeleteRaw(
    requestParameters: DeletePropertyReferenceUserentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deletePropertyReferenceUserentityDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/authorities`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-authorityentity-by-userentity-Id
   */
  async deletePropertyReferenceUserentityDelete(
    requestParameters: DeletePropertyReferenceUserentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deletePropertyReferenceUserentityDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * delete-usergroupentity-by-userentity-Id
   */
  async deletePropertyReferenceUserentityDelete1Raw(
    requestParameters: DeletePropertyReferenceUserentityDelete1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deletePropertyReferenceUserentityDelete1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/group`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-usergroupentity-by-userentity-Id
   */
  async deletePropertyReferenceUserentityDelete1(
    requestParameters: DeletePropertyReferenceUserentityDelete1Request,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deletePropertyReferenceUserentityDelete1Raw(requestParameters, initOverrides);
  }

  /**
   * delete-videoentity-by-userentity-Id
   */
  async deletePropertyReferenceUserentityDelete2Raw(
    requestParameters: DeletePropertyReferenceUserentityDelete2Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deletePropertyReferenceUserentityDelete2.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/videos`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-videoentity-by-userentity-Id
   */
  async deletePropertyReferenceUserentityDelete2(
    requestParameters: DeletePropertyReferenceUserentityDelete2Request,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deletePropertyReferenceUserentityDelete2Raw(requestParameters, initOverrides);
  }

  /**
   * get-authorityentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGetRaw(
    requestParameters: FollowPropertyReferenceUserentityGetRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelAuthorityEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling followPropertyReferenceUserentityGet.',
      );
    }

    if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
      throw new runtime.RequiredError(
        'propertyId',
        'Required parameter requestParameters.propertyId was null or undefined when calling followPropertyReferenceUserentityGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/authorities/{propertyId}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(requestParameters.propertyId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelAuthorityEntityFromJSON(jsonValue));
  }

  /**
   * get-authorityentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGet(
    requestParameters: FollowPropertyReferenceUserentityGetRequest,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelAuthorityEntity> {
    const response = await this.followPropertyReferenceUserentityGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * get-authorityentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGet1Raw(
    requestParameters: FollowPropertyReferenceUserentityGet1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelAuthorityEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling followPropertyReferenceUserentityGet1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/authorities`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelAuthorityEntityFromJSON(jsonValue));
  }

  /**
   * get-authorityentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGet1(
    requestParameters: FollowPropertyReferenceUserentityGet1Request,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelAuthorityEntity> {
    const response = await this.followPropertyReferenceUserentityGet1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * get-usergroupentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGet2Raw(
    requestParameters: FollowPropertyReferenceUserentityGet2Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserGroupEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling followPropertyReferenceUserentityGet2.',
      );
    }

    if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
      throw new runtime.RequiredError(
        'propertyId',
        'Required parameter requestParameters.propertyId was null or undefined when calling followPropertyReferenceUserentityGet2.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/group/{propertyId}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(requestParameters.propertyId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * get-usergroupentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGet2(
    requestParameters: FollowPropertyReferenceUserentityGet2Request,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserGroupEntity> {
    const response = await this.followPropertyReferenceUserentityGet2Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * get-usergroupentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGet21Raw(
    requestParameters: FollowPropertyReferenceUserentityGet21Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelUserGroupEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling followPropertyReferenceUserentityGet21.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/group`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelUserGroupEntityFromJSON(jsonValue));
  }

  /**
   * get-usergroupentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGet21(
    requestParameters: FollowPropertyReferenceUserentityGet21Request,
    initOverrides?: RequestInit,
  ): Promise<EntityModelUserGroupEntity> {
    const response = await this.followPropertyReferenceUserentityGet21Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * get-videoentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGet3Raw(
    requestParameters: FollowPropertyReferenceUserentityGet3Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelVideoEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling followPropertyReferenceUserentityGet3.',
      );
    }

    if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
      throw new runtime.RequiredError(
        'propertyId',
        'Required parameter requestParameters.propertyId was null or undefined when calling followPropertyReferenceUserentityGet3.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/videos/{propertyId}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(requestParameters.propertyId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelVideoEntityFromJSON(jsonValue));
  }

  /**
   * get-videoentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGet3(
    requestParameters: FollowPropertyReferenceUserentityGet3Request,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelVideoEntity> {
    const response = await this.followPropertyReferenceUserentityGet3Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * get-videoentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGet31Raw(
    requestParameters: FollowPropertyReferenceUserentityGet31Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<CollectionModelVideoEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling followPropertyReferenceUserentityGet31.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{id}/videos`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelVideoEntityFromJSON(jsonValue));
  }

  /**
   * get-videoentity-by-userentity-Id
   */
  async followPropertyReferenceUserentityGet31(
    requestParameters: FollowPropertyReferenceUserentityGet31Request,
    initOverrides?: RequestInit,
  ): Promise<CollectionModelVideoEntity> {
    const response = await this.followPropertyReferenceUserentityGet31Raw(requestParameters, initOverrides);
    return await response.value();
  }
}
