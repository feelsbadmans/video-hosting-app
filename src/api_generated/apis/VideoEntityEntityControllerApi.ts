/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  EntityModelVideoEntity,
  EntityModelVideoEntityFromJSON,
  EntityModelVideoEntityToJSON,
  PagedModelEntityModelVideoEntity,
  PagedModelEntityModelVideoEntityFromJSON,
  PagedModelEntityModelVideoEntityToJSON,
  VideoEntityRequestBody,
  VideoEntityRequestBodyFromJSON,
  VideoEntityRequestBodyToJSON,
} from '../models';

export interface DeleteItemResourceVideoentityDeleteRequest {
  id: string;
}

export interface GetCollectionResourceVideoentityGet1Request {
  page?: number;
  size?: number;
  sort?: Array<string>;
}

export interface GetItemResourceVideoentityGetRequest {
  id: string;
}

export interface PatchItemResourceVideoentityPatchRequest {
  id: string;
  videoEntityRequestBody: VideoEntityRequestBody;
}

export interface PostCollectionResourceVideoentityPostRequest {
  videoEntityRequestBody: VideoEntityRequestBody;
}

export interface PutItemResourceVideoentityPutRequest {
  id: string;
  videoEntityRequestBody: VideoEntityRequestBody;
}

/**
 *
 */
export class VideoEntityEntityControllerApi extends runtime.BaseAPI {
  /**
   * delete-videoentity
   */
  async deleteItemResourceVideoentityDeleteRaw(
    requestParameters: DeleteItemResourceVideoentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deleteItemResourceVideoentityDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/videos/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete-videoentity
   */
  async deleteItemResourceVideoentityDelete(
    requestParameters: DeleteItemResourceVideoentityDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deleteItemResourceVideoentityDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * get-videoentity
   */
  async getCollectionResourceVideoentityGet1Raw(
    requestParameters: GetCollectionResourceVideoentityGet1Request,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<PagedModelEntityModelVideoEntity>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    if (requestParameters.sort) {
      queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/videos`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelEntityModelVideoEntityFromJSON(jsonValue));
  }

  /**
   * get-videoentity
   */
  async getCollectionResourceVideoentityGet1(
    requestParameters: GetCollectionResourceVideoentityGet1Request = {},
    initOverrides?: RequestInit,
  ): Promise<PagedModelEntityModelVideoEntity> {
    const response = await this.getCollectionResourceVideoentityGet1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * get-videoentity
   */
  async getItemResourceVideoentityGetRaw(
    requestParameters: GetItemResourceVideoentityGetRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelVideoEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getItemResourceVideoentityGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/videos/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelVideoEntityFromJSON(jsonValue));
  }

  /**
   * get-videoentity
   */
  async getItemResourceVideoentityGet(
    requestParameters: GetItemResourceVideoentityGetRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelVideoEntity> {
    const response = await this.getItemResourceVideoentityGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * patch-videoentity
   */
  async patchItemResourceVideoentityPatchRaw(
    requestParameters: PatchItemResourceVideoentityPatchRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelVideoEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling patchItemResourceVideoentityPatch.',
      );
    }

    if (requestParameters.videoEntityRequestBody === null || requestParameters.videoEntityRequestBody === undefined) {
      throw new runtime.RequiredError(
        'videoEntityRequestBody',
        'Required parameter requestParameters.videoEntityRequestBody was null or undefined when calling patchItemResourceVideoentityPatch.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/videos/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: VideoEntityRequestBodyToJSON(requestParameters.videoEntityRequestBody),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelVideoEntityFromJSON(jsonValue));
  }

  /**
   * patch-videoentity
   */
  async patchItemResourceVideoentityPatch(
    requestParameters: PatchItemResourceVideoentityPatchRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelVideoEntity> {
    const response = await this.patchItemResourceVideoentityPatchRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * create-videoentity
   */
  async postCollectionResourceVideoentityPostRaw(
    requestParameters: PostCollectionResourceVideoentityPostRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelVideoEntity>> {
    if (requestParameters.videoEntityRequestBody === null || requestParameters.videoEntityRequestBody === undefined) {
      throw new runtime.RequiredError(
        'videoEntityRequestBody',
        'Required parameter requestParameters.videoEntityRequestBody was null or undefined when calling postCollectionResourceVideoentityPost.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/videos`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: VideoEntityRequestBodyToJSON(requestParameters.videoEntityRequestBody),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelVideoEntityFromJSON(jsonValue));
  }

  /**
   * create-videoentity
   */
  async postCollectionResourceVideoentityPost(
    requestParameters: PostCollectionResourceVideoentityPostRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelVideoEntity> {
    const response = await this.postCollectionResourceVideoentityPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * update-videoentity
   */
  async putItemResourceVideoentityPutRaw(
    requestParameters: PutItemResourceVideoentityPutRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<EntityModelVideoEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling putItemResourceVideoentityPut.',
      );
    }

    if (requestParameters.videoEntityRequestBody === null || requestParameters.videoEntityRequestBody === undefined) {
      throw new runtime.RequiredError(
        'videoEntityRequestBody',
        'Required parameter requestParameters.videoEntityRequestBody was null or undefined when calling putItemResourceVideoentityPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/videos/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: VideoEntityRequestBodyToJSON(requestParameters.videoEntityRequestBody),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelVideoEntityFromJSON(jsonValue));
  }

  /**
   * update-videoentity
   */
  async putItemResourceVideoentityPut(
    requestParameters: PutItemResourceVideoentityPutRequest,
    initOverrides?: RequestInit,
  ): Promise<EntityModelVideoEntity> {
    const response = await this.putItemResourceVideoentityPutRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
