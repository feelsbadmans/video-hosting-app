/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { Link, LinkFromJSON, LinkFromJSONTyped, LinkToJSON } from './Link';
import { UserEntity, UserEntityFromJSON, UserEntityFromJSONTyped, UserEntityToJSON } from './UserEntity';
import {
  UserGroupEntity,
  UserGroupEntityFromJSON,
  UserGroupEntityFromJSONTyped,
  UserGroupEntityToJSON,
} from './UserGroupEntity';

/**
 *
 * @export
 * @interface EntityModelVideoEntity
 */
export interface EntityModelVideoEntity {
  /**
   *
   * @type {string}
   * @memberof EntityModelVideoEntity
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof EntityModelVideoEntity
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof EntityModelVideoEntity
   */
  source: string;
  /**
   *
   * @type {UserEntity}
   * @memberof EntityModelVideoEntity
   */
  author?: UserEntity;
  /**
   *
   * @type {Set<UserGroupEntity>}
   * @memberof EntityModelVideoEntity
   */
  allowedGroups?: Set<UserGroupEntity>;
  /**
   *
   * @type {number}
   * @memberof EntityModelVideoEntity
   */
  id?: number;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof EntityModelVideoEntity
   */
  links?: { [key: string]: Link };
}

export function EntityModelVideoEntityFromJSON(json: any): EntityModelVideoEntity {
  return EntityModelVideoEntityFromJSONTyped(json, false);
}

export function EntityModelVideoEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityModelVideoEntity {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    description: json['description'],
    source: json['source'],
    author: !exists(json, 'author') ? undefined : UserEntityFromJSON(json['author']),
    allowedGroups: !exists(json, 'allowedGroups')
      ? undefined
      : new Set((json['allowedGroups'] as Array<any>).map(UserGroupEntityFromJSON)),
    id: !exists(json, 'id') ? undefined : json['id'],
    links: !exists(json, '_links') ? undefined : mapValues(json['_links'], LinkFromJSON),
  };
}

export function EntityModelVideoEntityToJSON(value?: EntityModelVideoEntity | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    description: value.description,
    source: value.source,
    author: UserEntityToJSON(value.author),
    allowedGroups:
      value.allowedGroups === undefined
        ? undefined
        : Array.from(value.allowedGroups as Set<any>).map(UserGroupEntityToJSON),
    id: value.id,
    _links: value.links === undefined ? undefined : mapValues(value.links, LinkToJSON),
  };
}
