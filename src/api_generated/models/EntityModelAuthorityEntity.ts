/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { Link, LinkFromJSON, LinkFromJSONTyped, LinkToJSON } from './Link';

/**
 *
 * @export
 * @interface EntityModelAuthorityEntity
 */
export interface EntityModelAuthorityEntity {
  /**
   *
   * @type {string}
   * @memberof EntityModelAuthorityEntity
   */
  name: EntityModelAuthorityEntityNameEnum;
  /**
   *
   * @type {number}
   * @memberof EntityModelAuthorityEntity
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof EntityModelAuthorityEntity
   */
  authority: string;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof EntityModelAuthorityEntity
   */
  links?: { [key: string]: Link };
}

/**
 * @export
 * @enum {string}
 */
export enum EntityModelAuthorityEntityNameEnum {
  OrdinaryUser = 'ORDINARY_USER',
  VideoCreator = 'VIDEO_CREATOR',
  Admin = 'ADMIN',
}

export function EntityModelAuthorityEntityFromJSON(json: any): EntityModelAuthorityEntity {
  return EntityModelAuthorityEntityFromJSONTyped(json, false);
}

export function EntityModelAuthorityEntityFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): EntityModelAuthorityEntity {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    id: !exists(json, 'id') ? undefined : json['id'],
    authority: json['authority'],
    links: !exists(json, '_links') ? undefined : mapValues(json['_links'], LinkFromJSON),
  };
}

export function EntityModelAuthorityEntityToJSON(value?: EntityModelAuthorityEntity | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    id: value.id,
    authority: value.authority,
    _links: value.links === undefined ? undefined : mapValues(value.links, LinkToJSON),
  };
}
