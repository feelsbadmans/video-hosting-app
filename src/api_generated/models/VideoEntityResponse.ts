/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { UserEntity, UserEntityFromJSON, UserEntityFromJSONTyped, UserEntityToJSON } from './UserEntity';
import {
  UserGroupEntity,
  UserGroupEntityFromJSON,
  UserGroupEntityFromJSONTyped,
  UserGroupEntityToJSON,
} from './UserGroupEntity';

/**
 *
 * @export
 * @interface VideoEntityResponse
 */
export interface VideoEntityResponse {
  /**
   *
   * @type {string}
   * @memberof VideoEntityResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof VideoEntityResponse
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof VideoEntityResponse
   */
  source: string;
  /**
   *
   * @type {UserEntity}
   * @memberof VideoEntityResponse
   */
  author?: UserEntity;
  /**
   *
   * @type {Set<UserGroupEntity>}
   * @memberof VideoEntityResponse
   */
  allowedGroups?: Set<UserGroupEntity>;
  /**
   *
   * @type {number}
   * @memberof VideoEntityResponse
   */
  id?: number;
}

export function VideoEntityResponseFromJSON(json: any): VideoEntityResponse {
  return VideoEntityResponseFromJSONTyped(json, false);
}

export function VideoEntityResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): VideoEntityResponse {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    description: json['description'],
    source: json['source'],
    author: !exists(json, 'author') ? undefined : UserEntityFromJSON(json['author']),
    allowedGroups: !exists(json, 'allowedGroups')
      ? undefined
      : new Set((json['allowedGroups'] as Array<any>).map(UserGroupEntityFromJSON)),
    id: !exists(json, 'id') ? undefined : json['id'],
  };
}

export function VideoEntityResponseToJSON(value?: VideoEntityResponse | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    description: value.description,
    source: value.source,
    author: UserEntityToJSON(value.author),
    allowedGroups:
      value.allowedGroups === undefined
        ? undefined
        : Array.from(value.allowedGroups as Set<any>).map(UserGroupEntityToJSON),
    id: value.id,
  };
}
