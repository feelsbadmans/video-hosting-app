/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  AuthorityEntity,
  AuthorityEntityFromJSON,
  AuthorityEntityFromJSONTyped,
  AuthorityEntityToJSON,
} from './AuthorityEntity';
import { Link, LinkFromJSON, LinkFromJSONTyped, LinkToJSON } from './Link';
import {
  UserGroupEntity,
  UserGroupEntityFromJSON,
  UserGroupEntityFromJSONTyped,
  UserGroupEntityToJSON,
} from './UserGroupEntity';
import { VideoEntity, VideoEntityFromJSON, VideoEntityFromJSONTyped, VideoEntityToJSON } from './VideoEntity';

/**
 *
 * @export
 * @interface EntityModelUserEntity
 */
export interface EntityModelUserEntity {
  /**
   *
   * @type {string}
   * @memberof EntityModelUserEntity
   */
  username: string;
  /**
   *
   * @type {boolean}
   * @memberof EntityModelUserEntity
   */
  enabled: boolean;
  /**
   *
   * @type {boolean}
   * @memberof EntityModelUserEntity
   */
  accountNonExpired: boolean;
  /**
   *
   * @type {boolean}
   * @memberof EntityModelUserEntity
   */
  credentialsNonExpired: boolean;
  /**
   *
   * @type {boolean}
   * @memberof EntityModelUserEntity
   */
  accountNonLocked: boolean;
  /**
   *
   * @type {Set<AuthorityEntity>}
   * @memberof EntityModelUserEntity
   */
  authorities: Set<AuthorityEntity>;
  /**
   *
   * @type {UserGroupEntity}
   * @memberof EntityModelUserEntity
   */
  group?: UserGroupEntity;
  /**
   *
   * @type {string}
   * @memberof EntityModelUserEntity
   */
  name: string;
  /**
   *
   * @type {Array<VideoEntity>}
   * @memberof EntityModelUserEntity
   */
  videos: Array<VideoEntity>;
  /**
   *
   * @type {number}
   * @memberof EntityModelUserEntity
   */
  id?: number;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof EntityModelUserEntity
   */
  links?: { [key: string]: Link };
}

export function EntityModelUserEntityFromJSON(json: any): EntityModelUserEntity {
  return EntityModelUserEntityFromJSONTyped(json, false);
}

export function EntityModelUserEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityModelUserEntity {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    username: json['username'],
    enabled: json['enabled'],
    accountNonExpired: json['accountNonExpired'],
    credentialsNonExpired: json['credentialsNonExpired'],
    accountNonLocked: json['accountNonLocked'],
    authorities: new Set((json['authorities'] as Array<any>).map(AuthorityEntityFromJSON)),
    group: !exists(json, 'group') ? undefined : UserGroupEntityFromJSON(json['group']),
    name: json['name'],
    videos: (json['videos'] as Array<any>).map(VideoEntityFromJSON),
    id: !exists(json, 'id') ? undefined : json['id'],
    links: !exists(json, '_links') ? undefined : mapValues(json['_links'], LinkFromJSON),
  };
}

export function EntityModelUserEntityToJSON(value?: EntityModelUserEntity | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    username: value.username,
    enabled: value.enabled,
    accountNonExpired: value.accountNonExpired,
    credentialsNonExpired: value.credentialsNonExpired,
    accountNonLocked: value.accountNonLocked,
    authorities: Array.from(value.authorities as Set<any>).map(AuthorityEntityToJSON),
    group: UserGroupEntityToJSON(value.group),
    name: value.name,
    videos: (value.videos as Array<any>).map(VideoEntityToJSON),
    id: value.id,
    _links: value.links === undefined ? undefined : mapValues(value.links, LinkToJSON),
  };
}
