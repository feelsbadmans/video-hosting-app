/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { globalAxios } from 'api/axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AbstractJsonSchemaPropertyObject
 */
export interface AbstractJsonSchemaPropertyObject {
  /**
   *
   * @type {string}
   * @memberof AbstractJsonSchemaPropertyObject
   */
  title?: string;
  /**
   *
   * @type {boolean}
   * @memberof AbstractJsonSchemaPropertyObject
   */
  readOnly?: boolean;
}
/**
 *
 * @export
 * @interface AuthorityEntity
 */
export interface AuthorityEntity {
  /**
   *
   * @type {string}
   * @memberof AuthorityEntity
   */
  name: AuthorityEntityNameEnum;
  /**
   *
   * @type {number}
   * @memberof AuthorityEntity
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AuthorityEntity
   */
  authority: string;
}

export const AuthorityEntityNameEnum = {
  OrdinaryUser: 'ORDINARY_USER',
  VideoCreator: 'VIDEO_CREATOR',
  Admin: 'ADMIN',
} as const;

export type AuthorityEntityNameEnum = typeof AuthorityEntityNameEnum[keyof typeof AuthorityEntityNameEnum];

/**
 *
 * @export
 * @interface AuthorityEntityRequestBody
 */
export interface AuthorityEntityRequestBody {
  /**
   *
   * @type {string}
   * @memberof AuthorityEntityRequestBody
   */
  name: AuthorityEntityRequestBodyNameEnum;
  /**
   *
   * @type {number}
   * @memberof AuthorityEntityRequestBody
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AuthorityEntityRequestBody
   */
  authority: string;
}

export const AuthorityEntityRequestBodyNameEnum = {
  OrdinaryUser: 'ORDINARY_USER',
  VideoCreator: 'VIDEO_CREATOR',
  Admin: 'ADMIN',
} as const;

export type AuthorityEntityRequestBodyNameEnum =
  typeof AuthorityEntityRequestBodyNameEnum[keyof typeof AuthorityEntityRequestBodyNameEnum];

/**
 *
 * @export
 * @interface AuthorityEntityResponse
 */
export interface AuthorityEntityResponse {
  /**
   *
   * @type {string}
   * @memberof AuthorityEntityResponse
   */
  name: AuthorityEntityResponseNameEnum;
  /**
   *
   * @type {number}
   * @memberof AuthorityEntityResponse
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AuthorityEntityResponse
   */
  authority: string;
}

export const AuthorityEntityResponseNameEnum = {
  OrdinaryUser: 'ORDINARY_USER',
  VideoCreator: 'VIDEO_CREATOR',
  Admin: 'ADMIN',
} as const;

export type AuthorityEntityResponseNameEnum =
  typeof AuthorityEntityResponseNameEnum[keyof typeof AuthorityEntityResponseNameEnum];

/**
 *
 * @export
 * @interface CollectionModelAuthorityEntity
 */
export interface CollectionModelAuthorityEntity {
  /**
   *
   * @type {CollectionModelAuthorityEntityEmbedded}
   * @memberof CollectionModelAuthorityEntity
   */
  _embedded?: CollectionModelAuthorityEntityEmbedded;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof CollectionModelAuthorityEntity
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface CollectionModelAuthorityEntityEmbedded
 */
export interface CollectionModelAuthorityEntityEmbedded {
  /**
   *
   * @type {Array<AuthorityEntityResponse>}
   * @memberof CollectionModelAuthorityEntityEmbedded
   */
  authorityEntities?: Array<AuthorityEntityResponse>;
}
/**
 *
 * @export
 * @interface CollectionModelEntityModelUserEntity
 */
export interface CollectionModelEntityModelUserEntity {
  /**
   *
   * @type {PagedModelEntityModelUserEntityEmbedded}
   * @memberof CollectionModelEntityModelUserEntity
   */
  _embedded?: PagedModelEntityModelUserEntityEmbedded;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof CollectionModelEntityModelUserEntity
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface CollectionModelEntityModelUserGroupEntity
 */
export interface CollectionModelEntityModelUserGroupEntity {
  /**
   *
   * @type {CollectionModelEntityModelUserGroupEntityEmbedded}
   * @memberof CollectionModelEntityModelUserGroupEntity
   */
  _embedded?: CollectionModelEntityModelUserGroupEntityEmbedded;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof CollectionModelEntityModelUserGroupEntity
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface CollectionModelEntityModelUserGroupEntityEmbedded
 */
export interface CollectionModelEntityModelUserGroupEntityEmbedded {
  /**
   *
   * @type {Array<EntityModelUserGroupEntity>}
   * @memberof CollectionModelEntityModelUserGroupEntityEmbedded
   */
  userGroupEntities?: Array<EntityModelUserGroupEntity>;
}
/**
 *
 * @export
 * @interface CollectionModelEntityModelVideoEntity
 */
export interface CollectionModelEntityModelVideoEntity {
  /**
   *
   * @type {PagedModelEntityModelVideoEntityEmbedded}
   * @memberof CollectionModelEntityModelVideoEntity
   */
  _embedded?: PagedModelEntityModelVideoEntityEmbedded;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof CollectionModelEntityModelVideoEntity
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface CollectionModelObject
 */
export interface CollectionModelObject {
  /**
   *
   * @type {CollectionModelObjectEmbedded}
   * @memberof CollectionModelObject
   */
  _embedded?: CollectionModelObjectEmbedded;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof CollectionModelObject
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface CollectionModelObjectEmbedded
 */
export interface CollectionModelObjectEmbedded {
  /**
   *
   * @type {Array<object>}
   * @memberof CollectionModelObjectEmbedded
   */
  objects?: Array<object>;
}
/**
 *
 * @export
 * @interface CollectionModelUserEntity
 */
export interface CollectionModelUserEntity {
  /**
   *
   * @type {CollectionModelUserEntityEmbedded}
   * @memberof CollectionModelUserEntity
   */
  _embedded?: CollectionModelUserEntityEmbedded;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof CollectionModelUserEntity
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface CollectionModelUserEntityEmbedded
 */
export interface CollectionModelUserEntityEmbedded {
  /**
   *
   * @type {Array<UserEntityResponse>}
   * @memberof CollectionModelUserEntityEmbedded
   */
  userEntities?: Array<UserEntityResponse>;
}
/**
 *
 * @export
 * @interface CollectionModelUserGroupEntity
 */
export interface CollectionModelUserGroupEntity {
  /**
   *
   * @type {CollectionModelUserGroupEntityEmbedded}
   * @memberof CollectionModelUserGroupEntity
   */
  _embedded?: CollectionModelUserGroupEntityEmbedded;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof CollectionModelUserGroupEntity
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface CollectionModelUserGroupEntityEmbedded
 */
export interface CollectionModelUserGroupEntityEmbedded {
  /**
   *
   * @type {Array<UserGroupEntityResponse>}
   * @memberof CollectionModelUserGroupEntityEmbedded
   */
  userGroupEntities?: Array<UserGroupEntityResponse>;
}
/**
 *
 * @export
 * @interface CollectionModelVideoEntity
 */
export interface CollectionModelVideoEntity {
  /**
   *
   * @type {CollectionModelVideoEntityEmbedded}
   * @memberof CollectionModelVideoEntity
   */
  _embedded?: CollectionModelVideoEntityEmbedded;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof CollectionModelVideoEntity
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface CollectionModelVideoEntityEmbedded
 */
export interface CollectionModelVideoEntityEmbedded {
  /**
   *
   * @type {Array<VideoEntityResponse>}
   * @memberof CollectionModelVideoEntityEmbedded
   */
  videoEntities?: Array<VideoEntityResponse>;
}
/**
 *
 * @export
 * @interface CommonAuthResponse
 */
export interface CommonAuthResponse {
  /**
   *
   * @type {UserView}
   * @memberof CommonAuthResponse
   */
  user?: UserView;
  /**
   *
   * @type {string}
   * @memberof CommonAuthResponse
   */
  errorMessage?: string;
}
/**
 *
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
  /**
   *
   * @type {string}
   * @memberof CreateUserDto
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserDto
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserDto
   */
  passwordRepeat: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserDto
   */
  name?: string;
  /**
   *
   * @type {Set<string>}
   * @memberof CreateUserDto
   */
  authorities?: Set<string>;
  /**
   *
   * @type {string}
   * @memberof CreateUserDto
   */
  group?: string;
}
/**
 *
 * @export
 * @interface EntityModelAuthorityEntity
 */
export interface EntityModelAuthorityEntity {
  /**
   *
   * @type {string}
   * @memberof EntityModelAuthorityEntity
   */
  name: EntityModelAuthorityEntityNameEnum;
  /**
   *
   * @type {number}
   * @memberof EntityModelAuthorityEntity
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof EntityModelAuthorityEntity
   */
  authority: string;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof EntityModelAuthorityEntity
   */
  _links?: { [key: string]: Link };
}

export const EntityModelAuthorityEntityNameEnum = {
  OrdinaryUser: 'ORDINARY_USER',
  VideoCreator: 'VIDEO_CREATOR',
  Admin: 'ADMIN',
} as const;

export type EntityModelAuthorityEntityNameEnum =
  typeof EntityModelAuthorityEntityNameEnum[keyof typeof EntityModelAuthorityEntityNameEnum];

/**
 *
 * @export
 * @interface EntityModelUserEntity
 */
export interface EntityModelUserEntity {
  /**
   *
   * @type {string}
   * @memberof EntityModelUserEntity
   */
  username: string;
  /**
   *
   * @type {boolean}
   * @memberof EntityModelUserEntity
   */
  enabled: boolean;
  /**
   *
   * @type {boolean}
   * @memberof EntityModelUserEntity
   */
  accountNonExpired: boolean;
  /**
   *
   * @type {boolean}
   * @memberof EntityModelUserEntity
   */
  credentialsNonExpired: boolean;
  /**
   *
   * @type {boolean}
   * @memberof EntityModelUserEntity
   */
  accountNonLocked: boolean;
  /**
   *
   * @type {Set<AuthorityEntity>}
   * @memberof EntityModelUserEntity
   */
  authorities: Set<AuthorityEntity>;
  /**
   *
   * @type {UserGroupEntity}
   * @memberof EntityModelUserEntity
   */
  group?: UserGroupEntity;
  /**
   *
   * @type {string}
   * @memberof EntityModelUserEntity
   */
  name: string;
  /**
   *
   * @type {Array<VideoEntity>}
   * @memberof EntityModelUserEntity
   */
  videos: Array<VideoEntity>;
  /**
   *
   * @type {number}
   * @memberof EntityModelUserEntity
   */
  id?: number;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof EntityModelUserEntity
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface EntityModelUserGroupEntity
 */
export interface EntityModelUserGroupEntity {
  /**
   *
   * @type {string}
   * @memberof EntityModelUserGroupEntity
   */
  name: string;
  /**
   *
   * @type {Array<UserEntity>}
   * @memberof EntityModelUserGroupEntity
   */
  users: Array<UserEntity>;
  /**
   *
   * @type {number}
   * @memberof EntityModelUserGroupEntity
   */
  id?: number;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof EntityModelUserGroupEntity
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface EntityModelVideoEntity
 */
export interface EntityModelVideoEntity {
  /**
   *
   * @type {string}
   * @memberof EntityModelVideoEntity
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof EntityModelVideoEntity
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof EntityModelVideoEntity
   */
  source: string;
  /**
   *
   * @type {UserEntity}
   * @memberof EntityModelVideoEntity
   */
  author?: UserEntity;
  /**
   *
   * @type {Set<UserGroupEntity>}
   * @memberof EntityModelVideoEntity
   */
  allowedGroups?: Set<UserGroupEntity>;
  /**
   *
   * @type {number}
   * @memberof EntityModelVideoEntity
   */
  id?: number;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof EntityModelVideoEntity
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface Item
 */
export interface Item {
  /**
   *
   * @type {string}
   * @memberof Item
   */
  type?: string;
  /**
   *
   * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
   * @memberof Item
   */
  properties?: { [key: string]: AbstractJsonSchemaPropertyObject };
  /**
   *
   * @type {Array<string>}
   * @memberof Item
   */
  requiredProperties?: Array<string>;
}
/**
 *
 * @export
 * @interface JsonSchema
 */
export interface JsonSchema {
  /**
   *
   * @type {string}
   * @memberof JsonSchema
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof JsonSchema
   */
  description?: string;
  /**
   *
   * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
   * @memberof JsonSchema
   */
  properties?: { [key: string]: AbstractJsonSchemaPropertyObject };
  /**
   *
   * @type {Array<string>}
   * @memberof JsonSchema
   */
  requiredProperties?: Array<string>;
  /**
   *
   * @type {{ [key: string]: Item; }}
   * @memberof JsonSchema
   */
  definitions?: { [key: string]: Item };
  /**
   *
   * @type {string}
   * @memberof JsonSchema
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof JsonSchema
   */
  $schema?: string;
}
/**
 *
 * @export
 * @interface Link
 */
export interface Link {
  /**
   *
   * @type {string}
   * @memberof Link
   */
  href?: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  hreflang?: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  deprecation?: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  profile?: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  name?: string;
  /**
   *
   * @type {boolean}
   * @memberof Link
   */
  templated?: boolean;
}
/**
 *
 * @export
 * @interface LoginUserDto
 */
export interface LoginUserDto {
  /**
   *
   * @type {string}
   * @memberof LoginUserDto
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof LoginUserDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface PageMetadata
 */
export interface PageMetadata {
  /**
   *
   * @type {number}
   * @memberof PageMetadata
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageMetadata
   */
  totalElements?: number;
  /**
   *
   * @type {number}
   * @memberof PageMetadata
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PageMetadata
   */
  number?: number;
}
/**
 *
 * @export
 * @interface PagedModelEntityModelAuthorityEntity
 */
export interface PagedModelEntityModelAuthorityEntity {
  /**
   *
   * @type {PagedModelEntityModelAuthorityEntityEmbedded}
   * @memberof PagedModelEntityModelAuthorityEntity
   */
  _embedded?: PagedModelEntityModelAuthorityEntityEmbedded;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof PagedModelEntityModelAuthorityEntity
   */
  _links?: { [key: string]: Link };
  /**
   *
   * @type {PageMetadata}
   * @memberof PagedModelEntityModelAuthorityEntity
   */
  page?: PageMetadata;
}
/**
 *
 * @export
 * @interface PagedModelEntityModelAuthorityEntityEmbedded
 */
export interface PagedModelEntityModelAuthorityEntityEmbedded {
  /**
   *
   * @type {Array<EntityModelAuthorityEntity>}
   * @memberof PagedModelEntityModelAuthorityEntityEmbedded
   */
  authorityEntities?: Array<EntityModelAuthorityEntity>;
}
/**
 *
 * @export
 * @interface PagedModelEntityModelUserEntity
 */
export interface PagedModelEntityModelUserEntity {
  /**
   *
   * @type {PagedModelEntityModelUserEntityEmbedded}
   * @memberof PagedModelEntityModelUserEntity
   */
  _embedded?: PagedModelEntityModelUserEntityEmbedded;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof PagedModelEntityModelUserEntity
   */
  _links?: { [key: string]: Link };
  /**
   *
   * @type {PageMetadata}
   * @memberof PagedModelEntityModelUserEntity
   */
  page?: PageMetadata;
}
/**
 *
 * @export
 * @interface PagedModelEntityModelUserEntityEmbedded
 */
export interface PagedModelEntityModelUserEntityEmbedded {
  /**
   *
   * @type {Array<EntityModelUserEntity>}
   * @memberof PagedModelEntityModelUserEntityEmbedded
   */
  userEntities?: Array<EntityModelUserEntity>;
}
/**
 *
 * @export
 * @interface PagedModelEntityModelVideoEntity
 */
export interface PagedModelEntityModelVideoEntity {
  /**
   *
   * @type {PagedModelEntityModelVideoEntityEmbedded}
   * @memberof PagedModelEntityModelVideoEntity
   */
  _embedded?: PagedModelEntityModelVideoEntityEmbedded;
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof PagedModelEntityModelVideoEntity
   */
  _links?: { [key: string]: Link };
  /**
   *
   * @type {PageMetadata}
   * @memberof PagedModelEntityModelVideoEntity
   */
  page?: PageMetadata;
}
/**
 *
 * @export
 * @interface PagedModelEntityModelVideoEntityEmbedded
 */
export interface PagedModelEntityModelVideoEntityEmbedded {
  /**
   *
   * @type {Array<EntityModelVideoEntity>}
   * @memberof PagedModelEntityModelVideoEntityEmbedded
   */
  videoEntities?: Array<EntityModelVideoEntity>;
}
/**
 *
 * @export
 * @interface RepresentationModelObject
 */
export interface RepresentationModelObject {
  /**
   *
   * @type {{ [key: string]: Link; }}
   * @memberof RepresentationModelObject
   */
  _links?: { [key: string]: Link };
}
/**
 *
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  username: string;
  /**
   *
   * @type {boolean}
   * @memberof UserEntity
   */
  enabled: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserEntity
   */
  accountNonExpired: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserEntity
   */
  credentialsNonExpired: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserEntity
   */
  accountNonLocked: boolean;
  /**
   *
   * @type {Set<AuthorityEntity>}
   * @memberof UserEntity
   */
  authorities: Set<AuthorityEntity>;
  /**
   *
   * @type {UserGroupEntity}
   * @memberof UserEntity
   */
  group?: UserGroupEntity;
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  name: string;
  /**
   *
   * @type {Array<VideoEntity>}
   * @memberof UserEntity
   */
  videos: Array<VideoEntity>;
  /**
   *
   * @type {number}
   * @memberof UserEntity
   */
  id?: number;
}
/**
 *
 * @export
 * @interface UserEntityRequestBody
 */
export interface UserEntityRequestBody {
  /**
   *
   * @type {string}
   * @memberof UserEntityRequestBody
   */
  username: string;
  /**
   *
   * @type {boolean}
   * @memberof UserEntityRequestBody
   */
  enabled: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserEntityRequestBody
   */
  accountNonExpired: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserEntityRequestBody
   */
  credentialsNonExpired: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserEntityRequestBody
   */
  accountNonLocked: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof UserEntityRequestBody
   */
  authorities: Array<string>;
  /**
   *
   * @type {string}
   * @memberof UserEntityRequestBody
   */
  group?: string;
  /**
   *
   * @type {string}
   * @memberof UserEntityRequestBody
   */
  name: string;
  /**
   *
   * @type {Array<string>}
   * @memberof UserEntityRequestBody
   */
  videos: Array<string>;
  /**
   *
   * @type {number}
   * @memberof UserEntityRequestBody
   */
  id?: number;
}
/**
 *
 * @export
 * @interface UserEntityResponse
 */
export interface UserEntityResponse {
  /**
   *
   * @type {string}
   * @memberof UserEntityResponse
   */
  username: string;
  /**
   *
   * @type {boolean}
   * @memberof UserEntityResponse
   */
  enabled: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserEntityResponse
   */
  accountNonExpired: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserEntityResponse
   */
  credentialsNonExpired: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserEntityResponse
   */
  accountNonLocked: boolean;
  /**
   *
   * @type {Set<AuthorityEntity>}
   * @memberof UserEntityResponse
   */
  authorities: Set<AuthorityEntity>;
  /**
   *
   * @type {UserGroupEntity}
   * @memberof UserEntityResponse
   */
  group?: UserGroupEntity;
  /**
   *
   * @type {string}
   * @memberof UserEntityResponse
   */
  name: string;
  /**
   *
   * @type {Array<VideoEntity>}
   * @memberof UserEntityResponse
   */
  videos: Array<VideoEntity>;
  /**
   *
   * @type {number}
   * @memberof UserEntityResponse
   */
  id?: number;
}
/**
 *
 * @export
 * @interface UserGroupEntity
 */
export interface UserGroupEntity {
  /**
   *
   * @type {string}
   * @memberof UserGroupEntity
   */
  name: string;
  /**
   *
   * @type {Array<UserEntity>}
   * @memberof UserGroupEntity
   */
  users: Array<UserEntity>;
  /**
   *
   * @type {number}
   * @memberof UserGroupEntity
   */
  id?: number;
}
/**
 *
 * @export
 * @interface UserGroupEntityRequestBody
 */
export interface UserGroupEntityRequestBody {
  /**
   *
   * @type {string}
   * @memberof UserGroupEntityRequestBody
   */
  name: string;
  /**
   *
   * @type {Array<string>}
   * @memberof UserGroupEntityRequestBody
   */
  users: Array<string>;
  /**
   *
   * @type {number}
   * @memberof UserGroupEntityRequestBody
   */
  id?: number;
}
/**
 *
 * @export
 * @interface UserGroupEntityResponse
 */
export interface UserGroupEntityResponse {
  /**
   *
   * @type {string}
   * @memberof UserGroupEntityResponse
   */
  name: string;
  /**
   *
   * @type {Array<UserEntity>}
   * @memberof UserGroupEntityResponse
   */
  users: Array<UserEntity>;
  /**
   *
   * @type {number}
   * @memberof UserGroupEntityResponse
   */
  id?: number;
}
/**
 *
 * @export
 * @interface UserView
 */
export interface UserView {
  /**
   *
   * @type {string}
   * @memberof UserView
   */
  username: string;
}
/**
 *
 * @export
 * @interface VideoEntity
 */
export interface VideoEntity {
  /**
   *
   * @type {string}
   * @memberof VideoEntity
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof VideoEntity
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof VideoEntity
   */
  source: string;
  /**
   *
   * @type {UserEntity}
   * @memberof VideoEntity
   */
  author?: UserEntity;
  /**
   *
   * @type {Set<UserGroupEntity>}
   * @memberof VideoEntity
   */
  allowedGroups?: Set<UserGroupEntity>;
  /**
   *
   * @type {number}
   * @memberof VideoEntity
   */
  id?: number;
}
/**
 *
 * @export
 * @interface VideoEntityRequestBody
 */
export interface VideoEntityRequestBody {
  /**
   *
   * @type {string}
   * @memberof VideoEntityRequestBody
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof VideoEntityRequestBody
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof VideoEntityRequestBody
   */
  source: string;
  /**
   *
   * @type {string}
   * @memberof VideoEntityRequestBody
   */
  author?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof VideoEntityRequestBody
   */
  allowedGroups?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof VideoEntityRequestBody
   */
  id?: number;
}
/**
 *
 * @export
 * @interface VideoEntityResponse
 */
export interface VideoEntityResponse {
  /**
   *
   * @type {string}
   * @memberof VideoEntityResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof VideoEntityResponse
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof VideoEntityResponse
   */
  source: string;
  /**
   *
   * @type {UserEntity}
   * @memberof VideoEntityResponse
   */
  author?: UserEntity;
  /**
   *
   * @type {Set<UserGroupEntity>}
   * @memberof VideoEntityResponse
   */
  allowedGroups?: Set<UserGroupEntity>;
  /**
   *
   * @type {number}
   * @memberof VideoEntityResponse
   */
  id?: number;
}

/**
 * AuthApiApi - axios parameter creator
 * @export
 */
export const AuthApiApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {LoginUserDto} [loginUserDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (loginUserDto?: LoginUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(loginUserDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateUserDto} [createUserDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: async (createUserDto?: CreateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApiApi - functional programming interface
 * @export
 */
export const AuthApiApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {LoginUserDto} [loginUserDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      loginUserDto?: LoginUserDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonAuthResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginUserDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {CreateUserDto} [createUserDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async register(
      createUserDto?: CreateUserDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonAuthResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.register(createUserDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AuthApiApi - factory interface
 * @export
 */
export const AuthApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AuthApiApiFp(configuration);
  return {
    /**
     *
     * @param {LoginUserDto} [loginUserDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginUserDto?: LoginUserDto, options?: any): AxiosPromise<CommonAuthResponse> {
      return localVarFp.login(loginUserDto, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateUserDto} [createUserDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(createUserDto?: CreateUserDto, options?: any): AxiosPromise<CommonAuthResponse> {
      return localVarFp.register(createUserDto, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApiApi - object-oriented interface
 * @export
 * @class AuthApiApi
 * @extends {BaseAPI}
 */
export class AuthApiApi extends BaseAPI {
  /**
   *
   * @param {LoginUserDto} [loginUserDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApiApi
   */
  public login(loginUserDto?: LoginUserDto, options?: AxiosRequestConfig) {
    return AuthApiApiFp(this.configuration)
      .login(loginUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateUserDto} [createUserDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApiApi
   */
  public register(createUserDto?: CreateUserDto, options?: AxiosRequestConfig) {
    return AuthApiApiFp(this.configuration)
      .register(createUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AuthorityEntityEntityControllerApi - axios parameter creator
 * @export
 */
export const AuthorityEntityEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * delete-authorityentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemResourceAuthorityentityDelete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteItemResourceAuthorityentityDelete', 'id', id);
      const localVarPath = `/authorityEntities/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-authorityentity
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionResourceAuthorityentityGet1: async (
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/authorityEntities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-authorityentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemResourceAuthorityentityGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getItemResourceAuthorityentityGet', 'id', id);
      const localVarPath = `/authorityEntities/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * patch-authorityentity
     * @param {string} id
     * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchItemResourceAuthorityentityPatch: async (
      id: string,
      authorityEntityRequestBody: AuthorityEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('patchItemResourceAuthorityentityPatch', 'id', id);
      // verify required parameter 'authorityEntityRequestBody' is not null or undefined
      assertParamExists(
        'patchItemResourceAuthorityentityPatch',
        'authorityEntityRequestBody',
        authorityEntityRequestBody,
      );
      const localVarPath = `/authorityEntities/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authorityEntityRequestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * create-authorityentity
     * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionResourceAuthorityentityPost: async (
      authorityEntityRequestBody: AuthorityEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'authorityEntityRequestBody' is not null or undefined
      assertParamExists(
        'postCollectionResourceAuthorityentityPost',
        'authorityEntityRequestBody',
        authorityEntityRequestBody,
      );
      const localVarPath = `/authorityEntities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authorityEntityRequestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * update-authorityentity
     * @param {string} id
     * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putItemResourceAuthorityentityPut: async (
      id: string,
      authorityEntityRequestBody: AuthorityEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putItemResourceAuthorityentityPut', 'id', id);
      // verify required parameter 'authorityEntityRequestBody' is not null or undefined
      assertParamExists('putItemResourceAuthorityentityPut', 'authorityEntityRequestBody', authorityEntityRequestBody);
      const localVarPath = `/authorityEntities/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authorityEntityRequestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthorityEntityEntityControllerApi - functional programming interface
 * @export
 */
export const AuthorityEntityEntityControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthorityEntityEntityControllerApiAxiosParamCreator(configuration);
  return {
    /**
     * delete-authorityentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteItemResourceAuthorityentityDelete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceAuthorityentityDelete(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-authorityentity
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectionResourceAuthorityentityGet1(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelAuthorityEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceAuthorityentityGet1(
        page,
        size,
        sort,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-authorityentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getItemResourceAuthorityentityGet(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthorityEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceAuthorityentityGet(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * patch-authorityentity
     * @param {string} id
     * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchItemResourceAuthorityentityPatch(
      id: string,
      authorityEntityRequestBody: AuthorityEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthorityEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceAuthorityentityPatch(
        id,
        authorityEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * create-authorityentity
     * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postCollectionResourceAuthorityentityPost(
      authorityEntityRequestBody: AuthorityEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthorityEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceAuthorityentityPost(
        authorityEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * update-authorityentity
     * @param {string} id
     * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putItemResourceAuthorityentityPut(
      id: string,
      authorityEntityRequestBody: AuthorityEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthorityEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceAuthorityentityPut(
        id,
        authorityEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AuthorityEntityEntityControllerApi - factory interface
 * @export
 */
export const AuthorityEntityEntityControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthorityEntityEntityControllerApiFp(configuration);
  return {
    /**
     * delete-authorityentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemResourceAuthorityentityDelete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteItemResourceAuthorityentityDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-authorityentity
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionResourceAuthorityentityGet1(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any,
    ): AxiosPromise<PagedModelEntityModelAuthorityEntity> {
      return localVarFp
        .getCollectionResourceAuthorityentityGet1(page, size, sort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-authorityentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemResourceAuthorityentityGet(id: string, options?: any): AxiosPromise<EntityModelAuthorityEntity> {
      return localVarFp.getItemResourceAuthorityentityGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     * patch-authorityentity
     * @param {string} id
     * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchItemResourceAuthorityentityPatch(
      id: string,
      authorityEntityRequestBody: AuthorityEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelAuthorityEntity> {
      return localVarFp
        .patchItemResourceAuthorityentityPatch(id, authorityEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * create-authorityentity
     * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionResourceAuthorityentityPost(
      authorityEntityRequestBody: AuthorityEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelAuthorityEntity> {
      return localVarFp
        .postCollectionResourceAuthorityentityPost(authorityEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * update-authorityentity
     * @param {string} id
     * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putItemResourceAuthorityentityPut(
      id: string,
      authorityEntityRequestBody: AuthorityEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelAuthorityEntity> {
      return localVarFp
        .putItemResourceAuthorityentityPut(id, authorityEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthorityEntityEntityControllerApi - object-oriented interface
 * @export
 * @class AuthorityEntityEntityControllerApi
 * @extends {BaseAPI}
 */
export class AuthorityEntityEntityControllerApi extends BaseAPI {
  /**
   * delete-authorityentity
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthorityEntityEntityControllerApi
   */
  public deleteItemResourceAuthorityentityDelete(id: string, options?: AxiosRequestConfig) {
    return AuthorityEntityEntityControllerApiFp(this.configuration)
      .deleteItemResourceAuthorityentityDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-authorityentity
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthorityEntityEntityControllerApi
   */
  public getCollectionResourceAuthorityentityGet1(
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return AuthorityEntityEntityControllerApiFp(this.configuration)
      .getCollectionResourceAuthorityentityGet1(page, size, sort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-authorityentity
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthorityEntityEntityControllerApi
   */
  public getItemResourceAuthorityentityGet(id: string, options?: AxiosRequestConfig) {
    return AuthorityEntityEntityControllerApiFp(this.configuration)
      .getItemResourceAuthorityentityGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * patch-authorityentity
   * @param {string} id
   * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthorityEntityEntityControllerApi
   */
  public patchItemResourceAuthorityentityPatch(
    id: string,
    authorityEntityRequestBody: AuthorityEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return AuthorityEntityEntityControllerApiFp(this.configuration)
      .patchItemResourceAuthorityentityPatch(id, authorityEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * create-authorityentity
   * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthorityEntityEntityControllerApi
   */
  public postCollectionResourceAuthorityentityPost(
    authorityEntityRequestBody: AuthorityEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return AuthorityEntityEntityControllerApiFp(this.configuration)
      .postCollectionResourceAuthorityentityPost(authorityEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * update-authorityentity
   * @param {string} id
   * @param {AuthorityEntityRequestBody} authorityEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthorityEntityEntityControllerApi
   */
  public putItemResourceAuthorityentityPut(
    id: string,
    authorityEntityRequestBody: AuthorityEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return AuthorityEntityEntityControllerApiFp(this.configuration)
      .putItemResourceAuthorityentityPut(id, authorityEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AuthorityEntitySearchControllerApi - axios parameter creator
 * @export
 */
export const AuthorityEntitySearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {'ORDINARY_USER' | 'VIDEO_CREATOR' | 'ADMIN'} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchAuthorityentityGet: async (
      name?: 'ORDINARY_USER' | 'VIDEO_CREATOR' | 'ADMIN',
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/authorityEntities/search/findByName`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter['name'] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthorityEntitySearchControllerApi - functional programming interface
 * @export
 */
export const AuthorityEntitySearchControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthorityEntitySearchControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {'ORDINARY_USER' | 'VIDEO_CREATOR' | 'ADMIN'} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeSearchAuthorityentityGet(
      name?: 'ORDINARY_USER' | 'VIDEO_CREATOR' | 'ADMIN',
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthorityEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchAuthorityentityGet(name, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AuthorityEntitySearchControllerApi - factory interface
 * @export
 */
export const AuthorityEntitySearchControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthorityEntitySearchControllerApiFp(configuration);
  return {
    /**
     *
     * @param {'ORDINARY_USER' | 'VIDEO_CREATOR' | 'ADMIN'} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchAuthorityentityGet(
      name?: 'ORDINARY_USER' | 'VIDEO_CREATOR' | 'ADMIN',
      options?: any,
    ): AxiosPromise<EntityModelAuthorityEntity> {
      return localVarFp.executeSearchAuthorityentityGet(name, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthorityEntitySearchControllerApi - object-oriented interface
 * @export
 * @class AuthorityEntitySearchControllerApi
 * @extends {BaseAPI}
 */
export class AuthorityEntitySearchControllerApi extends BaseAPI {
  /**
   *
   * @param {'ORDINARY_USER' | 'VIDEO_CREATOR' | 'ADMIN'} [name]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthorityEntitySearchControllerApi
   */
  public executeSearchAuthorityentityGet(
    name?: 'ORDINARY_USER' | 'VIDEO_CREATOR' | 'ADMIN',
    options?: AxiosRequestConfig,
  ) {
    return AuthorityEntitySearchControllerApiFp(this.configuration)
      .executeSearchAuthorityentityGet(name, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ProfileControllerApi - axios parameter creator
 * @export
 */
export const ProfileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptor111: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/profile/authorityEntities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptor112: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/profile/user-groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptor113: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/profile/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptor114: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/profile/videos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllFormsOfMetadata1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProfileControllerApi - functional programming interface
 * @export
 */
export const ProfileControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProfileControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async descriptor111(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor111(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async descriptor112(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor112(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async descriptor113(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor113(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async descriptor114(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor114(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listAllFormsOfMetadata1(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentationModelObject>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listAllFormsOfMetadata1(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ProfileControllerApi - factory interface
 * @export
 */
export const ProfileControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProfileControllerApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptor111(options?: any): AxiosPromise<string> {
      return localVarFp.descriptor111(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptor112(options?: any): AxiosPromise<string> {
      return localVarFp.descriptor112(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptor113(options?: any): AxiosPromise<string> {
      return localVarFp.descriptor113(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    descriptor114(options?: any): AxiosPromise<string> {
      return localVarFp.descriptor114(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllFormsOfMetadata1(options?: any): AxiosPromise<RepresentationModelObject> {
      return localVarFp.listAllFormsOfMetadata1(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProfileControllerApi - object-oriented interface
 * @export
 * @class ProfileControllerApi
 * @extends {BaseAPI}
 */
export class ProfileControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfileControllerApi
   */
  public descriptor111(options?: AxiosRequestConfig) {
    return ProfileControllerApiFp(this.configuration)
      .descriptor111(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfileControllerApi
   */
  public descriptor112(options?: AxiosRequestConfig) {
    return ProfileControllerApiFp(this.configuration)
      .descriptor112(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfileControllerApi
   */
  public descriptor113(options?: AxiosRequestConfig) {
    return ProfileControllerApiFp(this.configuration)
      .descriptor113(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfileControllerApi
   */
  public descriptor114(options?: AxiosRequestConfig) {
    return ProfileControllerApiFp(this.configuration)
      .descriptor114(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfileControllerApi
   */
  public listAllFormsOfMetadata1(options?: AxiosRequestConfig) {
    return ProfileControllerApiFp(this.configuration)
      .listAllFormsOfMetadata1(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TestApiApi - axios parameter creator
 * @export
 */
export const TestApiApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    helloAdmin: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/test`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TestApiApi - functional programming interface
 * @export
 */
export const TestApiApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TestApiApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async helloAdmin(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.helloAdmin(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * TestApiApi - factory interface
 * @export
 */
export const TestApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = TestApiApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    helloAdmin(options?: any): AxiosPromise<string> {
      return localVarFp.helloAdmin(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * TestApiApi - object-oriented interface
 * @export
 * @class TestApiApi
 * @extends {BaseAPI}
 */
export class TestApiApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TestApiApi
   */
  public helloAdmin(options?: AxiosRequestConfig) {
    return TestApiApiFp(this.configuration)
      .helloAdmin(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserEntityEntityControllerApi - axios parameter creator
 * @export
 */
export const UserEntityEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * delete-userentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemResourceUserentityDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteItemResourceUserentityDelete', 'id', id);
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-userentity
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionResourceUserentityGet1: async (
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-userentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemResourceUserentityGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getItemResourceUserentityGet', 'id', id);
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * patch-userentity
     * @param {string} id
     * @param {UserEntityRequestBody} userEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchItemResourceUserentityPatch: async (
      id: string,
      userEntityRequestBody: UserEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('patchItemResourceUserentityPatch', 'id', id);
      // verify required parameter 'userEntityRequestBody' is not null or undefined
      assertParamExists('patchItemResourceUserentityPatch', 'userEntityRequestBody', userEntityRequestBody);
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userEntityRequestBody, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * create-userentity
     * @param {UserEntityRequestBody} userEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionResourceUserentityPost: async (
      userEntityRequestBody: UserEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userEntityRequestBody' is not null or undefined
      assertParamExists('postCollectionResourceUserentityPost', 'userEntityRequestBody', userEntityRequestBody);
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userEntityRequestBody, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * update-userentity
     * @param {string} id
     * @param {UserEntityRequestBody} userEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putItemResourceUserentityPut: async (
      id: string,
      userEntityRequestBody: UserEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putItemResourceUserentityPut', 'id', id);
      // verify required parameter 'userEntityRequestBody' is not null or undefined
      assertParamExists('putItemResourceUserentityPut', 'userEntityRequestBody', userEntityRequestBody);
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userEntityRequestBody, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserEntityEntityControllerApi - functional programming interface
 * @export
 */
export const UserEntityEntityControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserEntityEntityControllerApiAxiosParamCreator(configuration);
  return {
    /**
     * delete-userentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteItemResourceUserentityDelete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceUserentityDelete(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-userentity
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectionResourceUserentityGet1(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceUserentityGet1(
        page,
        size,
        sort,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-userentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getItemResourceUserentityGet(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceUserentityGet(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * patch-userentity
     * @param {string} id
     * @param {UserEntityRequestBody} userEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchItemResourceUserentityPatch(
      id: string,
      userEntityRequestBody: UserEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceUserentityPatch(
        id,
        userEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * create-userentity
     * @param {UserEntityRequestBody} userEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postCollectionResourceUserentityPost(
      userEntityRequestBody: UserEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceUserentityPost(
        userEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * update-userentity
     * @param {string} id
     * @param {UserEntityRequestBody} userEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putItemResourceUserentityPut(
      id: string,
      userEntityRequestBody: UserEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceUserentityPut(
        id,
        userEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserEntityEntityControllerApi - factory interface
 * @export
 */
export const UserEntityEntityControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserEntityEntityControllerApiFp(configuration);
  return {
    /**
     * delete-userentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemResourceUserentityDelete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp.deleteItemResourceUserentityDelete(id, options).then((request) => request(axios, basePath));
    },
    /**
     * get-userentity
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionResourceUserentityGet1(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any,
    ): AxiosPromise<PagedModelEntityModelUserEntity> {
      return localVarFp
        .getCollectionResourceUserentityGet1(page, size, sort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-userentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemResourceUserentityGet(id: string, options?: any): AxiosPromise<EntityModelUserEntity> {
      return localVarFp.getItemResourceUserentityGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     * patch-userentity
     * @param {string} id
     * @param {UserEntityRequestBody} userEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchItemResourceUserentityPatch(
      id: string,
      userEntityRequestBody: UserEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelUserEntity> {
      return localVarFp
        .patchItemResourceUserentityPatch(id, userEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * create-userentity
     * @param {UserEntityRequestBody} userEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionResourceUserentityPost(
      userEntityRequestBody: UserEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelUserEntity> {
      return localVarFp
        .postCollectionResourceUserentityPost(userEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * update-userentity
     * @param {string} id
     * @param {UserEntityRequestBody} userEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putItemResourceUserentityPut(
      id: string,
      userEntityRequestBody: UserEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelUserEntity> {
      return localVarFp
        .putItemResourceUserentityPut(id, userEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserEntityEntityControllerApi - object-oriented interface
 * @export
 * @class UserEntityEntityControllerApi
 * @extends {BaseAPI}
 */
export class UserEntityEntityControllerApi extends BaseAPI {
  /**
   * delete-userentity
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityEntityControllerApi
   */
  public deleteItemResourceUserentityDelete(id: string, options?: AxiosRequestConfig) {
    return UserEntityEntityControllerApiFp(this.configuration)
      .deleteItemResourceUserentityDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-userentity
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityEntityControllerApi
   */
  public getCollectionResourceUserentityGet1(
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return UserEntityEntityControllerApiFp(this.configuration)
      .getCollectionResourceUserentityGet1(page, size, sort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-userentity
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityEntityControllerApi
   */
  public getItemResourceUserentityGet(id: string, options?: AxiosRequestConfig) {
    return UserEntityEntityControllerApiFp(this.configuration)
      .getItemResourceUserentityGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * patch-userentity
   * @param {string} id
   * @param {UserEntityRequestBody} userEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityEntityControllerApi
   */
  public patchItemResourceUserentityPatch(
    id: string,
    userEntityRequestBody: UserEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return UserEntityEntityControllerApiFp(this.configuration)
      .patchItemResourceUserentityPatch(id, userEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * create-userentity
   * @param {UserEntityRequestBody} userEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityEntityControllerApi
   */
  public postCollectionResourceUserentityPost(
    userEntityRequestBody: UserEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return UserEntityEntityControllerApiFp(this.configuration)
      .postCollectionResourceUserentityPost(userEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * update-userentity
   * @param {string} id
   * @param {UserEntityRequestBody} userEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityEntityControllerApi
   */
  public putItemResourceUserentityPut(
    id: string,
    userEntityRequestBody: UserEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return UserEntityEntityControllerApiFp(this.configuration)
      .putItemResourceUserentityPut(id, userEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserEntityPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const UserEntityPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * patch-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPatch: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPatch', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPatch', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/users/{id}/authorities`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * patch-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPatch1: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPatch1', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPatch1', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/users/{id}/group`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * patch-videoentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPatch2: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPatch2', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPatch2', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/users/{id}/videos`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * update-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPut: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPut', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPut', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/users/{id}/authorities`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * update-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPut1: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPut1', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPut1', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/users/{id}/group`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * update-videoentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPut2: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPut2', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceUserentityPut2', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/users/{id}/videos`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdUserentityDelete: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceIdUserentityDelete', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('deletePropertyReferenceIdUserentityDelete', 'propertyId', propertyId);
      const localVarPath = `/users/{id}/authorities/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdUserentityDelete1: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceIdUserentityDelete1', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('deletePropertyReferenceIdUserentityDelete1', 'propertyId', propertyId);
      const localVarPath = `/users/{id}/group/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-videoentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdUserentityDelete2: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceIdUserentityDelete2', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('deletePropertyReferenceIdUserentityDelete2', 'propertyId', propertyId);
      const localVarPath = `/users/{id}/videos/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceUserentityDelete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceUserentityDelete', 'id', id);
      const localVarPath = `/users/{id}/authorities`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceUserentityDelete1: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceUserentityDelete1', 'id', id);
      const localVarPath = `/users/{id}/group`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-videoentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceUserentityDelete2: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceUserentityDelete2', 'id', id);
      const localVarPath = `/users/{id}/videos`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceUserentityGet', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('followPropertyReferenceUserentityGet', 'propertyId', propertyId);
      const localVarPath = `/users/{id}/authorities/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet1: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceUserentityGet1', 'id', id);
      const localVarPath = `/users/{id}/authorities`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet2: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceUserentityGet2', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('followPropertyReferenceUserentityGet2', 'propertyId', propertyId);
      const localVarPath = `/users/{id}/group/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet21: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceUserentityGet21', 'id', id);
      const localVarPath = `/users/{id}/group`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-videoentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet3: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceUserentityGet3', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('followPropertyReferenceUserentityGet3', 'propertyId', propertyId);
      const localVarPath = `/users/{id}/videos/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-videoentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet31: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceUserentityGet31', 'id', id);
      const localVarPath = `/users/{id}/videos`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserEntityPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const UserEntityPropertyReferenceControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserEntityPropertyReferenceControllerApiAxiosParamCreator(configuration);
  return {
    /**
     * patch-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceUserentityPatch(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelAuthorityEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceUserentityPatch(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * patch-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceUserentityPatch1(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceUserentityPatch1(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * patch-videoentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceUserentityPatch2(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceUserentityPatch2(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * update-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceUserentityPut(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelAuthorityEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceUserentityPut(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * update-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceUserentityPut1(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceUserentityPut1(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * update-videoentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceUserentityPut2(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceUserentityPut2(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceIdUserentityDelete(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdUserentityDelete(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceIdUserentityDelete1(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdUserentityDelete1(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-videoentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceIdUserentityDelete2(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdUserentityDelete2(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceUserentityDelete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceUserentityDelete(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceUserentityDelete1(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceUserentityDelete1(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-videoentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceUserentityDelete2(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceUserentityDelete2(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceUserentityGet(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelAuthorityEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceUserentityGet(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceUserentityGet1(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelAuthorityEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceUserentityGet1(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceUserentityGet2(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceUserentityGet2(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceUserentityGet21(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceUserentityGet21(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-videoentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceUserentityGet3(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceUserentityGet3(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-videoentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceUserentityGet31(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceUserentityGet31(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserEntityPropertyReferenceControllerApi - factory interface
 * @export
 */
export const UserEntityPropertyReferenceControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserEntityPropertyReferenceControllerApiFp(configuration);
  return {
    /**
     * patch-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPatch(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<CollectionModelAuthorityEntity> {
      return localVarFp
        .createPropertyReferenceUserentityPatch(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * patch-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPatch1(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<EntityModelUserGroupEntity> {
      return localVarFp
        .createPropertyReferenceUserentityPatch1(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * patch-videoentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPatch2(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<CollectionModelVideoEntity> {
      return localVarFp
        .createPropertyReferenceUserentityPatch2(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * update-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPut(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<CollectionModelAuthorityEntity> {
      return localVarFp
        .createPropertyReferenceUserentityPut(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * update-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPut1(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<EntityModelUserGroupEntity> {
      return localVarFp
        .createPropertyReferenceUserentityPut1(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * update-videoentity-by-userentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUserentityPut2(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<CollectionModelVideoEntity> {
      return localVarFp
        .createPropertyReferenceUserentityPut2(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdUserentityDelete(id: string, propertyId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceIdUserentityDelete(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdUserentityDelete1(id: string, propertyId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceIdUserentityDelete1(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-videoentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdUserentityDelete2(id: string, propertyId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceIdUserentityDelete2(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceUserentityDelete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceUserentityDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceUserentityDelete1(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceUserentityDelete1(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-videoentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceUserentityDelete2(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceUserentityDelete2(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet(
      id: string,
      propertyId: string,
      options?: any,
    ): AxiosPromise<CollectionModelAuthorityEntity> {
      return localVarFp
        .followPropertyReferenceUserentityGet(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-authorityentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet1(id: string, options?: any): AxiosPromise<CollectionModelAuthorityEntity> {
      return localVarFp.followPropertyReferenceUserentityGet1(id, options).then((request) => request(axios, basePath));
    },
    /**
     * get-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet2(
      id: string,
      propertyId: string,
      options?: any,
    ): AxiosPromise<EntityModelUserGroupEntity> {
      return localVarFp
        .followPropertyReferenceUserentityGet2(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-usergroupentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet21(id: string, options?: any): AxiosPromise<EntityModelUserGroupEntity> {
      return localVarFp.followPropertyReferenceUserentityGet21(id, options).then((request) => request(axios, basePath));
    },
    /**
     * get-videoentity-by-userentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet3(
      id: string,
      propertyId: string,
      options?: any,
    ): AxiosPromise<CollectionModelVideoEntity> {
      return localVarFp
        .followPropertyReferenceUserentityGet3(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-videoentity-by-userentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUserentityGet31(id: string, options?: any): AxiosPromise<CollectionModelVideoEntity> {
      return localVarFp.followPropertyReferenceUserentityGet31(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserEntityPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class UserEntityPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class UserEntityPropertyReferenceControllerApi extends BaseAPI {
  /**
   * patch-authorityentity-by-userentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceUserentityPatch(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceUserentityPatch(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * patch-usergroupentity-by-userentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceUserentityPatch1(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceUserentityPatch1(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * patch-videoentity-by-userentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceUserentityPatch2(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceUserentityPatch2(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * update-authorityentity-by-userentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceUserentityPut(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceUserentityPut(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * update-usergroupentity-by-userentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceUserentityPut1(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceUserentityPut1(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * update-videoentity-by-userentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceUserentityPut2(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceUserentityPut2(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-authorityentity-by-userentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceIdUserentityDelete(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceIdUserentityDelete(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-usergroupentity-by-userentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceIdUserentityDelete1(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceIdUserentityDelete1(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-videoentity-by-userentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceIdUserentityDelete2(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceIdUserentityDelete2(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-authorityentity-by-userentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceUserentityDelete(id: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceUserentityDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-usergroupentity-by-userentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceUserentityDelete1(id: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceUserentityDelete1(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-videoentity-by-userentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceUserentityDelete2(id: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceUserentityDelete2(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-authorityentity-by-userentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceUserentityGet(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceUserentityGet(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-authorityentity-by-userentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceUserentityGet1(id: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceUserentityGet1(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-usergroupentity-by-userentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceUserentityGet2(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceUserentityGet2(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-usergroupentity-by-userentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceUserentityGet21(id: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceUserentityGet21(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-videoentity-by-userentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceUserentityGet3(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceUserentityGet3(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-videoentity-by-userentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceUserentityGet31(id: string, options?: AxiosRequestConfig) {
    return UserEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceUserentityGet31(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserEntitySearchControllerApi - axios parameter creator
 * @export
 */
export const UserEntitySearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchUserentityGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/users/search/findAllByGroupIsNull`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchUserentityGet1: async (group?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/users/search/findAllByGroup_Name`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (group !== undefined) {
        localVarQueryParameter['group'] = group;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [username]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchUserentityGet2: async (username?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/users/search/findByUsername`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (username !== undefined) {
        localVarQueryParameter['username'] = username;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserEntitySearchControllerApi - functional programming interface
 * @export
 */
export const UserEntitySearchControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserEntitySearchControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeSearchUserentityGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelEntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchUserentityGet(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeSearchUserentityGet1(
      group?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelEntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchUserentityGet1(group, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} [username]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeSearchUserentityGet2(
      username?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchUserentityGet2(username, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserEntitySearchControllerApi - factory interface
 * @export
 */
export const UserEntitySearchControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserEntitySearchControllerApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchUserentityGet(options?: any): AxiosPromise<CollectionModelEntityModelUserEntity> {
      return localVarFp.executeSearchUserentityGet(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchUserentityGet1(group?: string, options?: any): AxiosPromise<CollectionModelEntityModelUserEntity> {
      return localVarFp.executeSearchUserentityGet1(group, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [username]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchUserentityGet2(username?: string, options?: any): AxiosPromise<EntityModelUserEntity> {
      return localVarFp.executeSearchUserentityGet2(username, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserEntitySearchControllerApi - object-oriented interface
 * @export
 * @class UserEntitySearchControllerApi
 * @extends {BaseAPI}
 */
export class UserEntitySearchControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntitySearchControllerApi
   */
  public executeSearchUserentityGet(options?: AxiosRequestConfig) {
    return UserEntitySearchControllerApiFp(this.configuration)
      .executeSearchUserentityGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [group]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntitySearchControllerApi
   */
  public executeSearchUserentityGet1(group?: string, options?: AxiosRequestConfig) {
    return UserEntitySearchControllerApiFp(this.configuration)
      .executeSearchUserentityGet1(group, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [username]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserEntitySearchControllerApi
   */
  public executeSearchUserentityGet2(username?: string, options?: AxiosRequestConfig) {
    return UserEntitySearchControllerApiFp(this.configuration)
      .executeSearchUserentityGet2(username, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserGroupEntityEntityControllerApi - axios parameter creator
 * @export
 */
export const UserGroupEntityEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * delete-usergroupentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemResourceUsergroupentityDelete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteItemResourceUsergroupentityDelete', 'id', id);
      const localVarPath = `/user-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-usergroupentity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionResourceUsergroupentityGet1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/user-groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-usergroupentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemResourceUsergroupentityGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getItemResourceUsergroupentityGet', 'id', id);
      const localVarPath = `/user-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * patch-usergroupentity
     * @param {string} id
     * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchItemResourceUsergroupentityPatch: async (
      id: string,
      userGroupEntityRequestBody: UserGroupEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('patchItemResourceUsergroupentityPatch', 'id', id);
      // verify required parameter 'userGroupEntityRequestBody' is not null or undefined
      assertParamExists(
        'patchItemResourceUsergroupentityPatch',
        'userGroupEntityRequestBody',
        userGroupEntityRequestBody,
      );
      const localVarPath = `/user-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userGroupEntityRequestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * create-usergroupentity
     * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionResourceUsergroupentityPost: async (
      userGroupEntityRequestBody: UserGroupEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userGroupEntityRequestBody' is not null or undefined
      assertParamExists(
        'postCollectionResourceUsergroupentityPost',
        'userGroupEntityRequestBody',
        userGroupEntityRequestBody,
      );
      const localVarPath = `/user-groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userGroupEntityRequestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * update-usergroupentity
     * @param {string} id
     * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putItemResourceUsergroupentityPut: async (
      id: string,
      userGroupEntityRequestBody: UserGroupEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putItemResourceUsergroupentityPut', 'id', id);
      // verify required parameter 'userGroupEntityRequestBody' is not null or undefined
      assertParamExists('putItemResourceUsergroupentityPut', 'userGroupEntityRequestBody', userGroupEntityRequestBody);
      const localVarPath = `/user-groups/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userGroupEntityRequestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserGroupEntityEntityControllerApi - functional programming interface
 * @export
 */
export const UserGroupEntityEntityControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserGroupEntityEntityControllerApiAxiosParamCreator(configuration);
  return {
    /**
     * delete-usergroupentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteItemResourceUsergroupentityDelete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceUsergroupentityDelete(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-usergroupentity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectionResourceUsergroupentityGet1(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelEntityModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceUsergroupentityGet1(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-usergroupentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getItemResourceUsergroupentityGet(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceUsergroupentityGet(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * patch-usergroupentity
     * @param {string} id
     * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchItemResourceUsergroupentityPatch(
      id: string,
      userGroupEntityRequestBody: UserGroupEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceUsergroupentityPatch(
        id,
        userGroupEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * create-usergroupentity
     * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postCollectionResourceUsergroupentityPost(
      userGroupEntityRequestBody: UserGroupEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceUsergroupentityPost(
        userGroupEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * update-usergroupentity
     * @param {string} id
     * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putItemResourceUsergroupentityPut(
      id: string,
      userGroupEntityRequestBody: UserGroupEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceUsergroupentityPut(
        id,
        userGroupEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserGroupEntityEntityControllerApi - factory interface
 * @export
 */
export const UserGroupEntityEntityControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserGroupEntityEntityControllerApiFp(configuration);
  return {
    /**
     * delete-usergroupentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemResourceUsergroupentityDelete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteItemResourceUsergroupentityDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-usergroupentity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionResourceUsergroupentityGet1(options?: any): AxiosPromise<CollectionModelEntityModelUserGroupEntity> {
      return localVarFp.getCollectionResourceUsergroupentityGet1(options).then((request) => request(axios, basePath));
    },
    /**
     * get-usergroupentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemResourceUsergroupentityGet(id: string, options?: any): AxiosPromise<EntityModelUserGroupEntity> {
      return localVarFp.getItemResourceUsergroupentityGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     * patch-usergroupentity
     * @param {string} id
     * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchItemResourceUsergroupentityPatch(
      id: string,
      userGroupEntityRequestBody: UserGroupEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelUserGroupEntity> {
      return localVarFp
        .patchItemResourceUsergroupentityPatch(id, userGroupEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * create-usergroupentity
     * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionResourceUsergroupentityPost(
      userGroupEntityRequestBody: UserGroupEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelUserGroupEntity> {
      return localVarFp
        .postCollectionResourceUsergroupentityPost(userGroupEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * update-usergroupentity
     * @param {string} id
     * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putItemResourceUsergroupentityPut(
      id: string,
      userGroupEntityRequestBody: UserGroupEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelUserGroupEntity> {
      return localVarFp
        .putItemResourceUsergroupentityPut(id, userGroupEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserGroupEntityEntityControllerApi - object-oriented interface
 * @export
 * @class UserGroupEntityEntityControllerApi
 * @extends {BaseAPI}
 */
export class UserGroupEntityEntityControllerApi extends BaseAPI {
  /**
   * delete-usergroupentity
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityEntityControllerApi
   */
  public deleteItemResourceUsergroupentityDelete(id: string, options?: AxiosRequestConfig) {
    return UserGroupEntityEntityControllerApiFp(this.configuration)
      .deleteItemResourceUsergroupentityDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-usergroupentity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityEntityControllerApi
   */
  public getCollectionResourceUsergroupentityGet1(options?: AxiosRequestConfig) {
    return UserGroupEntityEntityControllerApiFp(this.configuration)
      .getCollectionResourceUsergroupentityGet1(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-usergroupentity
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityEntityControllerApi
   */
  public getItemResourceUsergroupentityGet(id: string, options?: AxiosRequestConfig) {
    return UserGroupEntityEntityControllerApiFp(this.configuration)
      .getItemResourceUsergroupentityGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * patch-usergroupentity
   * @param {string} id
   * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityEntityControllerApi
   */
  public patchItemResourceUsergroupentityPatch(
    id: string,
    userGroupEntityRequestBody: UserGroupEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return UserGroupEntityEntityControllerApiFp(this.configuration)
      .patchItemResourceUsergroupentityPatch(id, userGroupEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * create-usergroupentity
   * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityEntityControllerApi
   */
  public postCollectionResourceUsergroupentityPost(
    userGroupEntityRequestBody: UserGroupEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return UserGroupEntityEntityControllerApiFp(this.configuration)
      .postCollectionResourceUsergroupentityPost(userGroupEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * update-usergroupentity
   * @param {string} id
   * @param {UserGroupEntityRequestBody} userGroupEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityEntityControllerApi
   */
  public putItemResourceUsergroupentityPut(
    id: string,
    userGroupEntityRequestBody: UserGroupEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return UserGroupEntityEntityControllerApiFp(this.configuration)
      .putItemResourceUsergroupentityPut(id, userGroupEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserGroupEntityPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const UserGroupEntityPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * patch-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUsergroupentityPatch: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceUsergroupentityPatch', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceUsergroupentityPatch', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/user-groups/{id}/users`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * update-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUsergroupentityPut: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceUsergroupentityPut', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceUsergroupentityPut', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/user-groups/{id}/users`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdUsergroupentityDelete: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceIdUsergroupentityDelete', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('deletePropertyReferenceIdUsergroupentityDelete', 'propertyId', propertyId);
      const localVarPath = `/user-groups/{id}/users/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceUsergroupentityDelete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceUsergroupentityDelete', 'id', id);
      const localVarPath = `/user-groups/{id}/users`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUsergroupentityGet: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceUsergroupentityGet', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('followPropertyReferenceUsergroupentityGet', 'propertyId', propertyId);
      const localVarPath = `/user-groups/{id}/users/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUsergroupentityGet1: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceUsergroupentityGet1', 'id', id);
      const localVarPath = `/user-groups/{id}/users`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserGroupEntityPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const UserGroupEntityPropertyReferenceControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserGroupEntityPropertyReferenceControllerApiAxiosParamCreator(configuration);
  return {
    /**
     * patch-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceUsergroupentityPatch(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceUsergroupentityPatch(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * update-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceUsergroupentityPut(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceUsergroupentityPut(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceIdUsergroupentityDelete(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdUsergroupentityDelete(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceUsergroupentityDelete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceUsergroupentityDelete(
        id,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceUsergroupentityGet(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceUsergroupentityGet(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceUsergroupentityGet1(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceUsergroupentityGet1(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserGroupEntityPropertyReferenceControllerApi - factory interface
 * @export
 */
export const UserGroupEntityPropertyReferenceControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserGroupEntityPropertyReferenceControllerApiFp(configuration);
  return {
    /**
     * patch-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUsergroupentityPatch(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<CollectionModelUserEntity> {
      return localVarFp
        .createPropertyReferenceUsergroupentityPatch(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * update-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceUsergroupentityPut(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<CollectionModelUserEntity> {
      return localVarFp
        .createPropertyReferenceUsergroupentityPut(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdUsergroupentityDelete(id: string, propertyId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceIdUsergroupentityDelete(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceUsergroupentityDelete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceUsergroupentityDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUsergroupentityGet(
      id: string,
      propertyId: string,
      options?: any,
    ): AxiosPromise<CollectionModelUserEntity> {
      return localVarFp
        .followPropertyReferenceUsergroupentityGet(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-userentity-by-usergroupentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceUsergroupentityGet1(id: string, options?: any): AxiosPromise<CollectionModelUserEntity> {
      return localVarFp
        .followPropertyReferenceUsergroupentityGet1(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserGroupEntityPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class UserGroupEntityPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class UserGroupEntityPropertyReferenceControllerApi extends BaseAPI {
  /**
   * patch-userentity-by-usergroupentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceUsergroupentityPatch(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return UserGroupEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceUsergroupentityPatch(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * update-userentity-by-usergroupentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceUsergroupentityPut(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return UserGroupEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceUsergroupentityPut(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-userentity-by-usergroupentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceIdUsergroupentityDelete(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return UserGroupEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceIdUsergroupentityDelete(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-userentity-by-usergroupentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceUsergroupentityDelete(id: string, options?: AxiosRequestConfig) {
    return UserGroupEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceUsergroupentityDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-userentity-by-usergroupentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceUsergroupentityGet(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return UserGroupEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceUsergroupentityGet(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-userentity-by-usergroupentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceUsergroupentityGet1(id: string, options?: AxiosRequestConfig) {
    return UserGroupEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceUsergroupentityGet1(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserGroupEntitySearchControllerApi - axios parameter creator
 * @export
 */
export const UserGroupEntitySearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchUsergroupentityGet: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/user-groups/search/findByName`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter['name'] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserGroupEntitySearchControllerApi - functional programming interface
 * @export
 */
export const UserGroupEntitySearchControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserGroupEntitySearchControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeSearchUsergroupentityGet(
      name?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchUsergroupentityGet(name, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserGroupEntitySearchControllerApi - factory interface
 * @export
 */
export const UserGroupEntitySearchControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserGroupEntitySearchControllerApiFp(configuration);
  return {
    /**
     *
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchUsergroupentityGet(name?: string, options?: any): AxiosPromise<EntityModelUserGroupEntity> {
      return localVarFp.executeSearchUsergroupentityGet(name, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserGroupEntitySearchControllerApi - object-oriented interface
 * @export
 * @class UserGroupEntitySearchControllerApi
 * @extends {BaseAPI}
 */
export class UserGroupEntitySearchControllerApi extends BaseAPI {
  /**
   *
   * @param {string} [name]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserGroupEntitySearchControllerApi
   */
  public executeSearchUsergroupentityGet(name?: string, options?: AxiosRequestConfig) {
    return UserGroupEntitySearchControllerApiFp(this.configuration)
      .executeSearchUsergroupentityGet(name, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * VideoEntityEntityControllerApi - axios parameter creator
 * @export
 */
export const VideoEntityEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * delete-videoentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemResourceVideoentityDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteItemResourceVideoentityDelete', 'id', id);
      const localVarPath = `/videos/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-videoentity
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionResourceVideoentityGet1: async (
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/videos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-videoentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemResourceVideoentityGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getItemResourceVideoentityGet', 'id', id);
      const localVarPath = `/videos/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * patch-videoentity
     * @param {string} id
     * @param {VideoEntityRequestBody} videoEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchItemResourceVideoentityPatch: async (
      id: string,
      videoEntityRequestBody: VideoEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('patchItemResourceVideoentityPatch', 'id', id);
      // verify required parameter 'videoEntityRequestBody' is not null or undefined
      assertParamExists('patchItemResourceVideoentityPatch', 'videoEntityRequestBody', videoEntityRequestBody);
      const localVarPath = `/videos/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        videoEntityRequestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * create-videoentity
     * @param {VideoEntityRequestBody} videoEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionResourceVideoentityPost: async (
      videoEntityRequestBody: VideoEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'videoEntityRequestBody' is not null or undefined
      assertParamExists('postCollectionResourceVideoentityPost', 'videoEntityRequestBody', videoEntityRequestBody);
      const localVarPath = `/videos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        videoEntityRequestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * update-videoentity
     * @param {string} id
     * @param {VideoEntityRequestBody} videoEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putItemResourceVideoentityPut: async (
      id: string,
      videoEntityRequestBody: VideoEntityRequestBody,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putItemResourceVideoentityPut', 'id', id);
      // verify required parameter 'videoEntityRequestBody' is not null or undefined
      assertParamExists('putItemResourceVideoentityPut', 'videoEntityRequestBody', videoEntityRequestBody);
      const localVarPath = `/videos/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        videoEntityRequestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * VideoEntityEntityControllerApi - functional programming interface
 * @export
 */
export const VideoEntityEntityControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = VideoEntityEntityControllerApiAxiosParamCreator(configuration);
  return {
    /**
     * delete-videoentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteItemResourceVideoentityDelete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceVideoentityDelete(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-videoentity
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCollectionResourceVideoentityGet1(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceVideoentityGet1(
        page,
        size,
        sort,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-videoentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getItemResourceVideoentityGet(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceVideoentityGet(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * patch-videoentity
     * @param {string} id
     * @param {VideoEntityRequestBody} videoEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchItemResourceVideoentityPatch(
      id: string,
      videoEntityRequestBody: VideoEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceVideoentityPatch(
        id,
        videoEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * create-videoentity
     * @param {VideoEntityRequestBody} videoEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postCollectionResourceVideoentityPost(
      videoEntityRequestBody: VideoEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceVideoentityPost(
        videoEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * update-videoentity
     * @param {string} id
     * @param {VideoEntityRequestBody} videoEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putItemResourceVideoentityPut(
      id: string,
      videoEntityRequestBody: VideoEntityRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceVideoentityPut(
        id,
        videoEntityRequestBody,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * VideoEntityEntityControllerApi - factory interface
 * @export
 */
export const VideoEntityEntityControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = VideoEntityEntityControllerApiFp(configuration);
  return {
    /**
     * delete-videoentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemResourceVideoentityDelete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp.deleteItemResourceVideoentityDelete(id, options).then((request) => request(axios, basePath));
    },
    /**
     * get-videoentity
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionResourceVideoentityGet1(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any,
    ): AxiosPromise<PagedModelEntityModelVideoEntity> {
      return localVarFp
        .getCollectionResourceVideoentityGet1(page, size, sort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-videoentity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemResourceVideoentityGet(id: string, options?: any): AxiosPromise<EntityModelVideoEntity> {
      return localVarFp.getItemResourceVideoentityGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     * patch-videoentity
     * @param {string} id
     * @param {VideoEntityRequestBody} videoEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchItemResourceVideoentityPatch(
      id: string,
      videoEntityRequestBody: VideoEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelVideoEntity> {
      return localVarFp
        .patchItemResourceVideoentityPatch(id, videoEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * create-videoentity
     * @param {VideoEntityRequestBody} videoEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionResourceVideoentityPost(
      videoEntityRequestBody: VideoEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelVideoEntity> {
      return localVarFp
        .postCollectionResourceVideoentityPost(videoEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * update-videoentity
     * @param {string} id
     * @param {VideoEntityRequestBody} videoEntityRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putItemResourceVideoentityPut(
      id: string,
      videoEntityRequestBody: VideoEntityRequestBody,
      options?: any,
    ): AxiosPromise<EntityModelVideoEntity> {
      return localVarFp
        .putItemResourceVideoentityPut(id, videoEntityRequestBody, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * VideoEntityEntityControllerApi - object-oriented interface
 * @export
 * @class VideoEntityEntityControllerApi
 * @extends {BaseAPI}
 */
export class VideoEntityEntityControllerApi extends BaseAPI {
  /**
   * delete-videoentity
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityEntityControllerApi
   */
  public deleteItemResourceVideoentityDelete(id: string, options?: AxiosRequestConfig) {
    return VideoEntityEntityControllerApiFp(this.configuration)
      .deleteItemResourceVideoentityDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-videoentity
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityEntityControllerApi
   */
  public getCollectionResourceVideoentityGet1(
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return VideoEntityEntityControllerApiFp(this.configuration)
      .getCollectionResourceVideoentityGet1(page, size, sort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-videoentity
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityEntityControllerApi
   */
  public getItemResourceVideoentityGet(id: string, options?: AxiosRequestConfig) {
    return VideoEntityEntityControllerApiFp(this.configuration)
      .getItemResourceVideoentityGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * patch-videoentity
   * @param {string} id
   * @param {VideoEntityRequestBody} videoEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityEntityControllerApi
   */
  public patchItemResourceVideoentityPatch(
    id: string,
    videoEntityRequestBody: VideoEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return VideoEntityEntityControllerApiFp(this.configuration)
      .patchItemResourceVideoentityPatch(id, videoEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * create-videoentity
   * @param {VideoEntityRequestBody} videoEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityEntityControllerApi
   */
  public postCollectionResourceVideoentityPost(
    videoEntityRequestBody: VideoEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return VideoEntityEntityControllerApiFp(this.configuration)
      .postCollectionResourceVideoentityPost(videoEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * update-videoentity
   * @param {string} id
   * @param {VideoEntityRequestBody} videoEntityRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityEntityControllerApi
   */
  public putItemResourceVideoentityPut(
    id: string,
    videoEntityRequestBody: VideoEntityRequestBody,
    options?: AxiosRequestConfig,
  ) {
    return VideoEntityEntityControllerApiFp(this.configuration)
      .putItemResourceVideoentityPut(id, videoEntityRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * VideoEntityPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const VideoEntityPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * patch-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceVideoentityPatch: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceVideoentityPatch', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceVideoentityPatch', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/videos/{id}/allowedGroups`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * patch-userentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceVideoentityPatch1: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceVideoentityPatch1', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceVideoentityPatch1', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/videos/{id}/author`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * update-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceVideoentityPut: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceVideoentityPut', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceVideoentityPut', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/videos/{id}/allowedGroups`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * update-userentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceVideoentityPut1: async (
      id: string,
      collectionModelObject: CollectionModelObject,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createPropertyReferenceVideoentityPut1', 'id', id);
      // verify required parameter 'collectionModelObject' is not null or undefined
      assertParamExists('createPropertyReferenceVideoentityPut1', 'collectionModelObject', collectionModelObject);
      const localVarPath = `/videos/{id}/author`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdVideoentityDelete: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceIdVideoentityDelete', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('deletePropertyReferenceIdVideoentityDelete', 'propertyId', propertyId);
      const localVarPath = `/videos/{id}/allowedGroups/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-userentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdVideoentityDelete1: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceIdVideoentityDelete1', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('deletePropertyReferenceIdVideoentityDelete1', 'propertyId', propertyId);
      const localVarPath = `/videos/{id}/author/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceVideoentityDelete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceVideoentityDelete', 'id', id);
      const localVarPath = `/videos/{id}/allowedGroups`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete-userentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceVideoentityDelete1: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePropertyReferenceVideoentityDelete1', 'id', id);
      const localVarPath = `/videos/{id}/author`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceVideoentityGet: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceVideoentityGet', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('followPropertyReferenceVideoentityGet', 'propertyId', propertyId);
      const localVarPath = `/videos/{id}/allowedGroups/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceVideoentityGet1: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceVideoentityGet1', 'id', id);
      const localVarPath = `/videos/{id}/allowedGroups`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-userentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceVideoentityGet2: async (
      id: string,
      propertyId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceVideoentityGet2', 'id', id);
      // verify required parameter 'propertyId' is not null or undefined
      assertParamExists('followPropertyReferenceVideoentityGet2', 'propertyId', propertyId);
      const localVarPath = `/videos/{id}/author/{propertyId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get-userentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceVideoentityGet21: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('followPropertyReferenceVideoentityGet21', 'id', id);
      const localVarPath = `/videos/{id}/author`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * VideoEntityPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const VideoEntityPropertyReferenceControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = VideoEntityPropertyReferenceControllerApiAxiosParamCreator(configuration);
  return {
    /**
     * patch-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceVideoentityPatch(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceVideoentityPatch(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * patch-userentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceVideoentityPatch1(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceVideoentityPatch1(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * update-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceVideoentityPut(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceVideoentityPut(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * update-userentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyReferenceVideoentityPut1(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceVideoentityPut1(
        id,
        collectionModelObject,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceIdVideoentityDelete(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdVideoentityDelete(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-userentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceIdVideoentityDelete1(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdVideoentityDelete1(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceVideoentityDelete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceVideoentityDelete(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * delete-userentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePropertyReferenceVideoentityDelete1(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceVideoentityDelete1(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceVideoentityGet(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceVideoentityGet(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceVideoentityGet1(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelUserGroupEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceVideoentityGet1(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-userentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceVideoentityGet2(
      id: string,
      propertyId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceVideoentityGet2(
        id,
        propertyId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * get-userentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followPropertyReferenceVideoentityGet21(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelUserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceVideoentityGet21(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * VideoEntityPropertyReferenceControllerApi - factory interface
 * @export
 */
export const VideoEntityPropertyReferenceControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = VideoEntityPropertyReferenceControllerApiFp(configuration);
  return {
    /**
     * patch-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceVideoentityPatch(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<CollectionModelUserGroupEntity> {
      return localVarFp
        .createPropertyReferenceVideoentityPatch(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * patch-userentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceVideoentityPatch1(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<EntityModelUserEntity> {
      return localVarFp
        .createPropertyReferenceVideoentityPatch1(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * update-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceVideoentityPut(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<CollectionModelUserGroupEntity> {
      return localVarFp
        .createPropertyReferenceVideoentityPut(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * update-userentity-by-videoentity-Id
     * @param {string} id
     * @param {CollectionModelObject} collectionModelObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyReferenceVideoentityPut1(
      id: string,
      collectionModelObject: CollectionModelObject,
      options?: any,
    ): AxiosPromise<EntityModelUserEntity> {
      return localVarFp
        .createPropertyReferenceVideoentityPut1(id, collectionModelObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdVideoentityDelete(id: string, propertyId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceIdVideoentityDelete(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-userentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceIdVideoentityDelete1(id: string, propertyId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceIdVideoentityDelete1(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceVideoentityDelete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceVideoentityDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete-userentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePropertyReferenceVideoentityDelete1(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePropertyReferenceVideoentityDelete1(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceVideoentityGet(
      id: string,
      propertyId: string,
      options?: any,
    ): AxiosPromise<CollectionModelUserGroupEntity> {
      return localVarFp
        .followPropertyReferenceVideoentityGet(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-usergroupentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceVideoentityGet1(id: string, options?: any): AxiosPromise<CollectionModelUserGroupEntity> {
      return localVarFp.followPropertyReferenceVideoentityGet1(id, options).then((request) => request(axios, basePath));
    },
    /**
     * get-userentity-by-videoentity-Id
     * @param {string} id
     * @param {string} propertyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceVideoentityGet2(
      id: string,
      propertyId: string,
      options?: any,
    ): AxiosPromise<EntityModelUserEntity> {
      return localVarFp
        .followPropertyReferenceVideoentityGet2(id, propertyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get-userentity-by-videoentity-Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followPropertyReferenceVideoentityGet21(id: string, options?: any): AxiosPromise<EntityModelUserEntity> {
      return localVarFp
        .followPropertyReferenceVideoentityGet21(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * VideoEntityPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class VideoEntityPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class VideoEntityPropertyReferenceControllerApi extends BaseAPI {
  /**
   * patch-usergroupentity-by-videoentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceVideoentityPatch(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceVideoentityPatch(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * patch-userentity-by-videoentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceVideoentityPatch1(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceVideoentityPatch1(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * update-usergroupentity-by-videoentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceVideoentityPut(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceVideoentityPut(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * update-userentity-by-videoentity-Id
   * @param {string} id
   * @param {CollectionModelObject} collectionModelObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public createPropertyReferenceVideoentityPut1(
    id: string,
    collectionModelObject: CollectionModelObject,
    options?: AxiosRequestConfig,
  ) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .createPropertyReferenceVideoentityPut1(id, collectionModelObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-usergroupentity-by-videoentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceIdVideoentityDelete(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceIdVideoentityDelete(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-userentity-by-videoentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceIdVideoentityDelete1(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceIdVideoentityDelete1(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-usergroupentity-by-videoentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceVideoentityDelete(id: string, options?: AxiosRequestConfig) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceVideoentityDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete-userentity-by-videoentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public deletePropertyReferenceVideoentityDelete1(id: string, options?: AxiosRequestConfig) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .deletePropertyReferenceVideoentityDelete1(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-usergroupentity-by-videoentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceVideoentityGet(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceVideoentityGet(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-usergroupentity-by-videoentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceVideoentityGet1(id: string, options?: AxiosRequestConfig) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceVideoentityGet1(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-userentity-by-videoentity-Id
   * @param {string} id
   * @param {string} propertyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceVideoentityGet2(id: string, propertyId: string, options?: AxiosRequestConfig) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceVideoentityGet2(id, propertyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get-userentity-by-videoentity-Id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntityPropertyReferenceControllerApi
   */
  public followPropertyReferenceVideoentityGet21(id: string, options?: AxiosRequestConfig) {
    return VideoEntityPropertyReferenceControllerApiFp(this.configuration)
      .followPropertyReferenceVideoentityGet21(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * VideoEntitySearchControllerApi - axios parameter creator
 * @export
 */
export const VideoEntitySearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchVideoentityGet: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/videos/search/findALlByAuthor_Id`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter['id'] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [username]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchVideoentityGet1: async (username?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/videos/search/findAllByAuthor_Username`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (username !== undefined) {
        localVarQueryParameter['username'] = username;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchVideoentityGet2: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/videos/search/findByName`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter['name'] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [searchName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchVideoentityGet3: async (
      searchName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/videos/search/findByNameContainingIgnoreCase`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (searchName !== undefined) {
        localVarQueryParameter['searchName'] = searchName;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * VideoEntitySearchControllerApi - functional programming interface
 * @export
 */
export const VideoEntitySearchControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = VideoEntitySearchControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeSearchVideoentityGet(
      id?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelEntityModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchVideoentityGet(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} [username]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeSearchVideoentityGet1(
      username?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelEntityModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchVideoentityGet1(username, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeSearchVideoentityGet2(
      name?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchVideoentityGet2(name, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} [searchName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeSearchVideoentityGet3(
      searchName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelVideoEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchVideoentityGet3(searchName, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * VideoEntitySearchControllerApi - factory interface
 * @export
 */
export const VideoEntitySearchControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = VideoEntitySearchControllerApiFp(configuration);
  return {
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchVideoentityGet(id?: number, options?: any): AxiosPromise<CollectionModelEntityModelVideoEntity> {
      return localVarFp.executeSearchVideoentityGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [username]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchVideoentityGet1(
      username?: string,
      options?: any,
    ): AxiosPromise<CollectionModelEntityModelVideoEntity> {
      return localVarFp.executeSearchVideoentityGet1(username, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchVideoentityGet2(name?: string, options?: any): AxiosPromise<EntityModelVideoEntity> {
      return localVarFp.executeSearchVideoentityGet2(name, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [searchName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSearchVideoentityGet3(searchName?: string, options?: any): AxiosPromise<EntityModelVideoEntity> {
      return localVarFp.executeSearchVideoentityGet3(searchName, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * VideoEntitySearchControllerApi - object-oriented interface
 * @export
 * @class VideoEntitySearchControllerApi
 * @extends {BaseAPI}
 */
export class VideoEntitySearchControllerApi extends BaseAPI {
  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntitySearchControllerApi
   */
  public executeSearchVideoentityGet(id?: number, options?: AxiosRequestConfig) {
    return VideoEntitySearchControllerApiFp(this.configuration)
      .executeSearchVideoentityGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [username]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntitySearchControllerApi
   */
  public executeSearchVideoentityGet1(username?: string, options?: AxiosRequestConfig) {
    return VideoEntitySearchControllerApiFp(this.configuration)
      .executeSearchVideoentityGet1(username, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [name]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntitySearchControllerApi
   */
  public executeSearchVideoentityGet2(name?: string, options?: AxiosRequestConfig) {
    return VideoEntitySearchControllerApiFp(this.configuration)
      .executeSearchVideoentityGet2(name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [searchName]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VideoEntitySearchControllerApi
   */
  public executeSearchVideoentityGet3(searchName?: string, options?: AxiosRequestConfig) {
    return VideoEntitySearchControllerApiFp(this.configuration)
      .executeSearchVideoentityGet3(searchName, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
